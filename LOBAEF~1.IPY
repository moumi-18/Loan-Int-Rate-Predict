{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem Statement :\n",
    "### To predict Interest Rate for customers based on the customer data provided.\n",
    "\n",
    "\n",
    "* ID -- Unique Loan ID \n",
    "* Amount.Requested -- Amount of money requested by the borrower \n",
    "* Interest. Rate -- Interest Rate on the loan [<- Dependent variable]\n",
    "* Loan. Length -- Number of payments (36 or 60) \n",
    "* Loan. Purpose -- Reason for loan provided by borrower\n",
    "* Debt.To.Income.Ratio -- All your monthly debt payments divided by your gross monthly income\n",
    "* Home. Ownership -- Home ownership status: (RENT, OWN, MORTGAGE, OTHERS)\n",
    "* Monthly. Income -- Monthly income of borrower\n",
    "* Open. CREDIT. Lines -- The number of open credit lines\n",
    "* Revolving.CREDIT. Balance -- Type of credit Balance that can be used repeatedly up to a certain limit as long as the account is open, and payments are made on time. With revolving credit, the amount of available credit\n",
    "* Inquiries.in.the.Last.6.Months -- A credit inquiry is a request by an institution for credit report information from a credit reporting agency\n",
    "* Employment.Length â€“ Employment period\n",
    "* FICO -- FICO credit score of the borrower (https://www.investopedia.com/terms/f/ficoscore.asp)\n",
    "\n",
    "Documentation Reference - https://www.frontiersin.org/articles/10.3389/fpubh.2021.729795/full "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "https://www.frontiersin.org/articles/10.3389/fpubh.2021.729795/full"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Note:\n",
    "        \n",
    "    a. DecisionTreeRegressor:\n",
    "    b. RandomForestRegressor: \n",
    "    c. AdaboostRegressor:\n",
    "    d. GradientBoostingRegressor:\n",
    "    e. XGBOOSTRegressork\n",
    "    e. KNNregressor\n",
    "    f. SVMRegressor\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. IMPORTING LIBRARIES & DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy.stats.mstats import winsorize\n",
    "from sklearn.preprocessing import OrdinalEncoder, StandardScaler\n",
    "from sklearn import model_selection\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, KFold\n",
    "from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n",
    "import math\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.stats import diagnostic as diag\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\n",
    "from xgboost.sklearn import XGBRegressor\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "regex = re.compile(r\"\\[|\\]|<\", re.IGNORECASE)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### User Defined Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def treat_num_columns(col_list):\n",
    "    \n",
    "    for i in col_list:\n",
    "        col_name = i\n",
    "        print('Independent Variable: ',col_name)\n",
    "        print('Check if there are any missing value in variable',col_name,': ')\n",
    "        if (loan_data[col_name].isnull().any().any() == True):\n",
    "            print('No. of Observations with missing value: ', loan_data[col_name].isnull().sum(axis=0))\n",
    "            # Replacing missing values with Median\n",
    "            loan_data[col_name].fillna(loan_data[col_name].median(), inplace=True)\n",
    "            print('After treating the missing values')\n",
    "            print(loan_data[col_name].isnull().sum(axis=0))\n",
    "            print('')\n",
    "        else:\n",
    "            print('No missing values found in ',col_name)\n",
    "            print('')\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def treat_cat_columns(cat_col_list):\n",
    "    \n",
    "    for i in cat_col_list:\n",
    "        col_name = i\n",
    "        print('Independent Variable: ',col_name)\n",
    "        print('Check if there are any missing value in variable',col_name,': ')\n",
    "        if (loan_data[col_name].isnull().any().any() == True):\n",
    "            print('No. of Observations with missing value: ', loan_data[col_name].isnull().sum(axis=0))\n",
    "            # Replacing missing values with Mode\n",
    "            loan_data[col_name].fillna(loan_data[col_name].mode()[0], inplace=True)\n",
    "            print('After treating the missing values')\n",
    "            print('No. of Observations with missing value: ', loan_data[col_name].isnull().sum(axis=0))\n",
    "            print('')\n",
    "        else:\n",
    "            print('No missing values found in ',col_name)\n",
    "            print('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_outliers(get_data):\n",
    "    \n",
    "    for i in range(get_data.shape[1]):\n",
    "        \n",
    "        col_name = get_data.columns[i]\n",
    "        print(\"-------#######-------\", col_name, \"------######------\")\n",
    "    \n",
    "        ax = sns.boxplot(x = get_data.columns[i], data = get_data)\n",
    "        plt.show()\n",
    "        sns.distplot(get_data[col_name], bins=15) \n",
    "        plt.show()\n",
    "    \n",
    "        q1 = get_data[col_name].quantile(0.25)\n",
    "        q2 = get_data[col_name].quantile(0.50)\n",
    "        q3 = get_data[col_name].quantile(0.75)\n",
    "        iqr = q3 - q1\n",
    "        LL = q1 - (1.5*iqr)\n",
    "        UL = q3 + (1.5*iqr)\n",
    "        print('Q1: ', q1)\n",
    "        print('Q2: ', q2)\n",
    "        print('Q3: ', q3)\n",
    "        print('IQR: ', iqr)\n",
    "        print('Lower Level: ', LL)\n",
    "        print('Upper Level: ', UL)     \n",
    "        print('     ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def treat_outliers(get_data, col_list):\n",
    "    for i in col_list:\n",
    "        col_name = i\n",
    "        \n",
    "        sns.distplot(get_data[col_name], bins=15) \n",
    "        plt.show()\n",
    "    \n",
    "        q1 = get_data[col_name].quantile(0.25)\n",
    "        q2 = get_data[col_name].quantile(0.50)\n",
    "        q3 = get_data[col_name].quantile(0.75)\n",
    "        iqr = q3 - q1\n",
    "        low_limit = q1 - (1.5*iqr)\n",
    "        upper_limit = q3 + (1.5*iqr)\n",
    "        print('Q1: ', q1)\n",
    "        print('Q2: ', q2)\n",
    "        print('Q3: ', q3)\n",
    "        print('IQR: ', iqr)\n",
    "        print('Lower Level: ', low_limit)\n",
    "        print('Upper Level: ', upper_limit)     \n",
    "        print('     ')\n",
    "    \n",
    "        get_data[col_name] = np.where(get_data[col_name] > upper_limit, upper_limit, get_data[col_name])  ### values more than Upper Limit value, are replaced by Upper Limit value\n",
    "        get_data[col_name] = np.where(get_data[col_name] < low_limit, low_limit, get_data[col_name])    ### values lower than Lower Limit value, are replaced by Lower Limit value\n",
    "        \n",
    "        sns.distplot(get_data[col_name], bins=15)\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_scatter(get_data):\n",
    "    for i in range(get_data.shape[1]):\n",
    "        col = get_data.columns[i]\n",
    "        \n",
    "        plt.scatter(get_data[col], get_data['Interest_Rate'])\n",
    "        plt.xlabel(col)\n",
    "        plt.ylabel('Interest_Rate')\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. GET DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Amount.Requested</th>\n",
       "      <th>Amount.Funded.By.Investors</th>\n",
       "      <th>Interest.Rate</th>\n",
       "      <th>Loan.Length</th>\n",
       "      <th>Loan.Purpose</th>\n",
       "      <th>Debt.To.Income.Ratio</th>\n",
       "      <th>Home.Ownership</th>\n",
       "      <th>Monthly.Income</th>\n",
       "      <th>Open.CREDIT.Lines</th>\n",
       "      <th>Revolving.CREDIT.Balance</th>\n",
       "      <th>Inquiries.in.the.Last.6.Months</th>\n",
       "      <th>Employment.Length</th>\n",
       "      <th>fico</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>81174.0</td>\n",
       "      <td>20000</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>0.09</td>\n",
       "      <td>36 months</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>0.15</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>6541.67</td>\n",
       "      <td>14</td>\n",
       "      <td>14272</td>\n",
       "      <td>2</td>\n",
       "      <td>1 year</td>\n",
       "      <td>735-739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>99592.0</td>\n",
       "      <td>19200</td>\n",
       "      <td>19200.0</td>\n",
       "      <td>0.12</td>\n",
       "      <td>36 months</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>0.28</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>4583.33</td>\n",
       "      <td>12</td>\n",
       "      <td>11140</td>\n",
       "      <td>1</td>\n",
       "      <td>2 years</td>\n",
       "      <td>715-719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>80059.0</td>\n",
       "      <td>35000</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>0.22</td>\n",
       "      <td>60 months</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>0.24</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>11500.00</td>\n",
       "      <td>14</td>\n",
       "      <td>21977</td>\n",
       "      <td>1</td>\n",
       "      <td>2 years</td>\n",
       "      <td>690-694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15825.0</td>\n",
       "      <td>10000</td>\n",
       "      <td>9975.0</td>\n",
       "      <td>0.10</td>\n",
       "      <td>36 months</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>0.14</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>3833.33</td>\n",
       "      <td>10</td>\n",
       "      <td>9346</td>\n",
       "      <td>0</td>\n",
       "      <td>5 years</td>\n",
       "      <td>695-699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33182.0</td>\n",
       "      <td>12000</td>\n",
       "      <td>12000.0</td>\n",
       "      <td>0.12</td>\n",
       "      <td>36 months</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>0.19</td>\n",
       "      <td>RENT</td>\n",
       "      <td>3195.00</td>\n",
       "      <td>11</td>\n",
       "      <td>14469</td>\n",
       "      <td>0</td>\n",
       "      <td>9 years</td>\n",
       "      <td>695-699</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        ID  Amount.Requested  Amount.Funded.By.Investors  Interest.Rate  \\\n",
       "0  81174.0             20000                     20000.0           0.09   \n",
       "1  99592.0             19200                     19200.0           0.12   \n",
       "2  80059.0             35000                     35000.0           0.22   \n",
       "3  15825.0             10000                      9975.0           0.10   \n",
       "4  33182.0             12000                     12000.0           0.12   \n",
       "\n",
       "  Loan.Length        Loan.Purpose  Debt.To.Income.Ratio Home.Ownership  \\\n",
       "0   36 months  debt_consolidation                  0.15       MORTGAGE   \n",
       "1   36 months  debt_consolidation                  0.28       MORTGAGE   \n",
       "2   60 months  debt_consolidation                  0.24       MORTGAGE   \n",
       "3   36 months  debt_consolidation                  0.14       MORTGAGE   \n",
       "4   36 months         credit_card                  0.19           RENT   \n",
       "\n",
       "   Monthly.Income  Open.CREDIT.Lines  Revolving.CREDIT.Balance  \\\n",
       "0         6541.67                 14                     14272   \n",
       "1         4583.33                 12                     11140   \n",
       "2        11500.00                 14                     21977   \n",
       "3         3833.33                 10                      9346   \n",
       "4         3195.00                 11                     14469   \n",
       "\n",
       "   Inquiries.in.the.Last.6.Months Employment.Length     fico  \n",
       "0                               2            1 year  735-739  \n",
       "1                               1           2 years  715-719  \n",
       "2                               1           2 years  690-694  \n",
       "3                               0           5 years  695-699  \n",
       "4                               0           9 years  695-699  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_intrt_data = pd.read_csv(r'C:\\Users\\RONALD\\Desktop\\IMS-Classroom\\Python Code\\Resume Project - ML Algo\\Loan Interest Rate prediction\\loans data_new.csv')\n",
    "loan_intrt_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. EXPLORE THE DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2500 entries, 0 to 2499\n",
      "Data columns (total 14 columns):\n",
      " #   Column                          Non-Null Count  Dtype  \n",
      "---  ------                          --------------  -----  \n",
      " 0   ID                              2499 non-null   float64\n",
      " 1   Amount.Requested                2500 non-null   int64  \n",
      " 2   Amount.Funded.By.Investors      2500 non-null   float64\n",
      " 3   Interest.Rate                   2500 non-null   float64\n",
      " 4   Loan.Length                     2499 non-null   object \n",
      " 5   Loan.Purpose                    2499 non-null   object \n",
      " 6   Debt.To.Income.Ratio            2500 non-null   float64\n",
      " 7   Home.Ownership                  2499 non-null   object \n",
      " 8   Monthly.Income                  2500 non-null   float64\n",
      " 9   Open.CREDIT.Lines               2500 non-null   int64  \n",
      " 10  Revolving.CREDIT.Balance        2500 non-null   int64  \n",
      " 11  Inquiries.in.the.Last.6.Months  2500 non-null   int64  \n",
      " 12  Employment.Length               2422 non-null   object \n",
      " 13  fico                            2500 non-null   object \n",
      "dtypes: float64(5), int64(4), object(5)\n",
      "memory usage: 273.6+ KB\n"
     ]
    }
   ],
   "source": [
    "loan_intrt_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'variance'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-261-3f1d7dbd3b82>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mloan_intrt_data\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvariance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[1;34m(self, name)\u001b[0m\n\u001b[0;32m   5272\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5273\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 5274\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   5275\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5276\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m->\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'variance'"
     ]
    }
   ],
   "source": [
    "loan_intrt_data.variance()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Amount.Requested</th>\n",
       "      <th>Amount.Funded.By.Investors</th>\n",
       "      <th>Interest.Rate</th>\n",
       "      <th>Debt.To.Income.Ratio</th>\n",
       "      <th>Monthly.Income</th>\n",
       "      <th>Open.CREDIT.Lines</th>\n",
       "      <th>Revolving.CREDIT.Balance</th>\n",
       "      <th>Inquiries.in.the.Last.6.Months</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2499.000000</td>\n",
       "      <td>2500.000000</td>\n",
       "      <td>2500.000000</td>\n",
       "      <td>2500.000000</td>\n",
       "      <td>2500.000000</td>\n",
       "      <td>2500.000000</td>\n",
       "      <td>2500.000000</td>\n",
       "      <td>2500.000000</td>\n",
       "      <td>2500.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>51643.325330</td>\n",
       "      <td>12389.590000</td>\n",
       "      <td>11984.346044</td>\n",
       "      <td>0.130396</td>\n",
       "      <td>0.153752</td>\n",
       "      <td>5685.153348</td>\n",
       "      <td>10.060800</td>\n",
       "      <td>15225.668800</td>\n",
       "      <td>0.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>30053.637661</td>\n",
       "      <td>7814.420929</td>\n",
       "      <td>7743.480223</td>\n",
       "      <td>0.041301</td>\n",
       "      <td>0.075164</td>\n",
       "      <td>3963.376189</td>\n",
       "      <td>4.516687</td>\n",
       "      <td>18308.723678</td>\n",
       "      <td>1.235064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>10.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>0.050000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>588.500000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>26570.500000</td>\n",
       "      <td>6000.000000</td>\n",
       "      <td>6000.000000</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>3474.267500</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>5545.250000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>50673.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>0.130000</td>\n",
       "      <td>0.150000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>10938.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>77583.000000</td>\n",
       "      <td>17000.000000</td>\n",
       "      <td>16000.000000</td>\n",
       "      <td>0.160000</td>\n",
       "      <td>0.210000</td>\n",
       "      <td>6800.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>18870.250000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>104202.000000</td>\n",
       "      <td>35000.000000</td>\n",
       "      <td>35000.000000</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.350000</td>\n",
       "      <td>102750.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>270800.000000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  ID  Amount.Requested  Amount.Funded.By.Investors  \\\n",
       "count    2499.000000       2500.000000                 2500.000000   \n",
       "mean    51643.325330      12389.590000                11984.346044   \n",
       "std     30053.637661       7814.420929                 7743.480223   \n",
       "min        10.000000       1000.000000                  200.000000   \n",
       "25%     26570.500000       6000.000000                 6000.000000   \n",
       "50%     50673.000000      10000.000000                10000.000000   \n",
       "75%     77583.000000      17000.000000                16000.000000   \n",
       "max    104202.000000      35000.000000                35000.000000   \n",
       "\n",
       "       Interest.Rate  Debt.To.Income.Ratio  Monthly.Income  Open.CREDIT.Lines  \\\n",
       "count    2500.000000           2500.000000     2500.000000        2500.000000   \n",
       "mean        0.130396              0.153752     5685.153348          10.060800   \n",
       "std         0.041301              0.075164     3963.376189           4.516687   \n",
       "min         0.050000              0.000000      588.500000           2.000000   \n",
       "25%         0.100000              0.100000     3474.267500           7.000000   \n",
       "50%         0.130000              0.150000     5000.000000           9.000000   \n",
       "75%         0.160000              0.210000     6800.000000          13.000000   \n",
       "max         0.250000              0.350000   102750.000000          38.000000   \n",
       "\n",
       "       Revolving.CREDIT.Balance  Inquiries.in.the.Last.6.Months  \n",
       "count               2500.000000                     2500.000000  \n",
       "mean               15225.668800                        0.910400  \n",
       "std                18308.723678                        1.235064  \n",
       "min                    0.000000                        0.000000  \n",
       "25%                 5545.250000                        0.000000  \n",
       "50%                10938.000000                        1.000000  \n",
       "75%                18870.250000                        1.000000  \n",
       "max               270800.000000                        9.000000  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_intrt_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan.Length</th>\n",
       "      <th>Loan.Purpose</th>\n",
       "      <th>Home.Ownership</th>\n",
       "      <th>Employment.Length</th>\n",
       "      <th>fico</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2499</td>\n",
       "      <td>2499</td>\n",
       "      <td>2499</td>\n",
       "      <td>2422</td>\n",
       "      <td>2500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>3</td>\n",
       "      <td>14</td>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>36 months</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>10+ years</td>\n",
       "      <td>670-674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1950</td>\n",
       "      <td>1307</td>\n",
       "      <td>1147</td>\n",
       "      <td>653</td>\n",
       "      <td>171</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Loan.Length        Loan.Purpose Home.Ownership Employment.Length  \\\n",
       "count         2499                2499           2499              2422   \n",
       "unique           3                  14              5                10   \n",
       "top      36 months  debt_consolidation       MORTGAGE         10+ years   \n",
       "freq          1950                1307           1147               653   \n",
       "\n",
       "           fico  \n",
       "count      2500  \n",
       "unique       38  \n",
       "top     670-674  \n",
       "freq        171  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_intrt_data.describe(include='object')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Rename columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ID', 'Amount_Requested', 'Amount_Funded_By_Investors', 'Interest_Rate',\n",
       "       'Loan_Length', 'Loan_Purpose', 'Debt_To_Income_Ratio', 'Home_Ownership',\n",
       "       'Monthly_Income', 'Open_Credit_Lines', 'Revolving_Credit_Balance',\n",
       "       'Inquiries_in_the_last_6months', 'Employment_Length', 'FICO_Score'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#rename columns\n",
    "loan_intrt_data.columns = ['ID','Amount_Requested','Amount_Funded_By_Investors','Interest_Rate','Loan_Length','Loan_Purpose',\n",
    "                          'Debt_To_Income_Ratio','Home_Ownership','Monthly_Income','Open_Credit_Lines','Revolving_Credit_Balance',\n",
    "                          'Inquiries_in_the_last_6months','Employment_Length','FICO_Score']\n",
    "\n",
    "loan_intrt_data.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Unique Values for each feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column Name:  ID\n",
      "29981.0     1\n",
      "7606.0      1\n",
      "51795.0     1\n",
      "79308.0     1\n",
      "95827.0     1\n",
      "           ..\n",
      "101715.0    1\n",
      "58739.0     1\n",
      "35834.0     1\n",
      "46337.0     1\n",
      "9664.0      1\n",
      "Name: ID, Length: 2499, dtype: int64\n",
      "--------- \n",
      "Column Name:  Amount_Requested\n",
      "10000    205\n",
      "12000    150\n",
      "5000     110\n",
      "20000    107\n",
      "6000     103\n",
      "        ... \n",
      "9700       1\n",
      "7625       1\n",
      "15300      1\n",
      "1450       1\n",
      "16350      1\n",
      "Name: Amount_Requested, Length: 380, dtype: int64\n",
      "--------- \n",
      "Column Name:  Amount_Funded_By_Investors\n",
      "10000.00    164\n",
      "12000.00    108\n",
      "5000.00      87\n",
      "6000.00      84\n",
      "8000.00      69\n",
      "           ... \n",
      "4525.00       1\n",
      "2450.00       1\n",
      "3100.00       1\n",
      "5795.24       1\n",
      "6350.01       1\n",
      "Name: Amount_Funded_By_Investors, Length: 708, dtype: int64\n",
      "--------- \n",
      "Column Name:  Interest_Rate\n",
      "0.14    268\n",
      "0.13    246\n",
      "0.12    239\n",
      "0.08    229\n",
      "0.11    201\n",
      "0.15    179\n",
      "0.16    162\n",
      "0.10    160\n",
      "0.18    127\n",
      "0.07    126\n",
      "0.17    105\n",
      "0.09     94\n",
      "0.19     87\n",
      "0.06     87\n",
      "0.20     61\n",
      "0.21     43\n",
      "0.22     37\n",
      "0.23     21\n",
      "0.24     13\n",
      "0.05     11\n",
      "0.25      4\n",
      "Name: Interest_Rate, dtype: int64\n",
      "--------- \n",
      "Column Name:  Loan_Length\n",
      "36 months    1950\n",
      "60 months     548\n",
      ".               1\n",
      "Name: Loan_Length, dtype: int64\n",
      "--------- \n",
      "Column Name:  Loan_Purpose\n",
      "debt_consolidation    1307\n",
      "credit_card            444\n",
      "other                  200\n",
      "home_improvement       152\n",
      "major_purchase         101\n",
      "small_business          87\n",
      "car                     50\n",
      "wedding                 39\n",
      "medical                 30\n",
      "moving                  29\n",
      "vacation                21\n",
      "house                   20\n",
      "educational             15\n",
      "renewable_energy         4\n",
      "Name: Loan_Purpose, dtype: int64\n",
      "--------- \n",
      "Column Name:  Debt_To_Income_Ratio\n",
      "0.16    134\n",
      "0.15    128\n",
      "0.17    118\n",
      "0.19    116\n",
      "0.18    113\n",
      "0.13    113\n",
      "0.11    113\n",
      "0.21    111\n",
      "0.14    111\n",
      "0.12    110\n",
      "0.10    104\n",
      "0.20    102\n",
      "0.08     98\n",
      "0.22     96\n",
      "0.09     95\n",
      "0.24     75\n",
      "0.07     72\n",
      "0.23     71\n",
      "0.06     66\n",
      "0.03     59\n",
      "0.05     58\n",
      "0.25     56\n",
      "0.04     56\n",
      "0.02     43\n",
      "0.28     42\n",
      "0.29     38\n",
      "0.27     37\n",
      "0.26     36\n",
      "0.01     28\n",
      "0.00     19\n",
      "0.31     18\n",
      "0.33     17\n",
      "0.30     15\n",
      "0.32     15\n",
      "0.34     13\n",
      "0.35      4\n",
      "Name: Debt_To_Income_Ratio, dtype: int64\n",
      "--------- \n",
      "Column Name:  Home_Ownership\n",
      "MORTGAGE    1147\n",
      "RENT        1146\n",
      "OWN          200\n",
      "OTHER          5\n",
      "NONE           1\n",
      "Name: Home_Ownership, dtype: int64\n",
      "--------- \n",
      "Column Name:  Monthly_Income\n",
      "5000.00    107\n",
      "4166.67     84\n",
      "3333.33     71\n",
      "5416.67     70\n",
      "5833.33     58\n",
      "          ... \n",
      "2512.00      1\n",
      "5883.33      1\n",
      "5373.33      1\n",
      "5988.67      1\n",
      "3584.62      1\n",
      "Name: Monthly_Income, Length: 632, dtype: int64\n",
      "--------- \n",
      "Column Name:  Open_Credit_Lines\n",
      "8     259\n",
      "9     236\n",
      "6     232\n",
      "7     216\n",
      "11    187\n",
      "10    185\n",
      "13    157\n",
      "12    153\n",
      "5     153\n",
      "14    138\n",
      "4     114\n",
      "15     96\n",
      "16     66\n",
      "3      59\n",
      "17     58\n",
      "18     51\n",
      "19     30\n",
      "21     26\n",
      "2      24\n",
      "20     23\n",
      "23     11\n",
      "22      8\n",
      "24      7\n",
      "25      4\n",
      "26      3\n",
      "31      1\n",
      "34      1\n",
      "38      1\n",
      "36      1\n",
      "Name: Open_Credit_Lines, dtype: int64\n",
      "--------- \n",
      "Column Name:  Revolving_Credit_Balance\n",
      "0        38\n",
      "1275      5\n",
      "6055      3\n",
      "12588     3\n",
      "2174      3\n",
      "         ..\n",
      "21175     1\n",
      "36534     1\n",
      "6842      1\n",
      "6844      1\n",
      "4137      1\n",
      "Name: Revolving_Credit_Balance, Length: 2349, dtype: int64\n",
      "--------- \n",
      "Column Name:  Inquiries_in_the_last_6months\n",
      "0    1249\n",
      "1     657\n",
      "2     336\n",
      "3     169\n",
      "4      53\n",
      "5      14\n",
      "6       8\n",
      "7       7\n",
      "9       5\n",
      "8       2\n",
      "Name: Inquiries_in_the_last_6months, dtype: int64\n",
      "--------- \n",
      "Column Name:  Employment_Length\n",
      "10+ years    653\n",
      "1 year       428\n",
      "2 years      243\n",
      "3 years      235\n",
      "5 years      202\n",
      "4 years      191\n",
      "6 years      163\n",
      "7 years      127\n",
      "8 years      108\n",
      "9 years       72\n",
      "Name: Employment_Length, dtype: int64\n",
      "--------- \n",
      "Column Name:  FICO_Score\n",
      "670-674    171\n",
      "675-679    166\n",
      "680-684    157\n",
      "695-699    153\n",
      "665-669    145\n",
      "690-694    140\n",
      "685-689    138\n",
      "705-709    134\n",
      "700-704    131\n",
      "660-664    125\n",
      "720-724    114\n",
      "710-714    112\n",
      "725-729     94\n",
      "730-734     94\n",
      "715-719     93\n",
      "735-739     65\n",
      "750-754     61\n",
      "745-749     54\n",
      "740-744     53\n",
      "755-759     46\n",
      "760-764     46\n",
      "765-769     36\n",
      "780-784     28\n",
      "775-779     22\n",
      "790-794     20\n",
      "785-789     19\n",
      "770-774     17\n",
      "800-804     13\n",
      "795-799     13\n",
      "805-809     11\n",
      "810-814      8\n",
      "815-819      6\n",
      "640-644      5\n",
      "655-659      4\n",
      "645-649      3\n",
      "830-834      1\n",
      "650-654      1\n",
      "820-824      1\n",
      "Name: FICO_Score, dtype: int64\n",
      "--------- \n"
     ]
    }
   ],
   "source": [
    "for i in range(loan_intrt_data.shape[1]):\n",
    "    col_name = loan_intrt_data.columns[i]\n",
    "    print('Column Name: ', col_name)\n",
    "    print(loan_intrt_data[col_name].value_counts())\n",
    "    print('--------- ')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Correction in the data (if any)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Loan_Length\n",
       ".               1\n",
       "36 months    1950\n",
       "60 months     547\n",
       "Name: ID, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_intrt_data.groupby(\"Loan_Length\")['ID'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "loan_intrt_data['Loan_Length'].replace(['.'],['36 months'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Loan_Length\n",
       "36 months    1951\n",
       "60 months     547\n",
       "Name: ID, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_intrt_data.groupby('Loan_Length')['ID'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ID                               9.032211e+08\n",
      "Amount_Requested                 6.106517e+07\n",
      "Amount_Funded_By_Investors       5.996149e+07\n",
      "Interest_Rate                    1.705765e-03\n",
      "Debt_To_Income_Ratio             5.649622e-03\n",
      "Monthly_Income                   1.570835e+07\n",
      "Open_Credit_Lines                2.040046e+01\n",
      "Revolving_Credit_Balance         3.352094e+08\n",
      "Inquiries_in_the_last_6months    1.525382e+00\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#var_col=loan_intrt_data.columns\n",
    "print(loan_intrt_data.var())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ID                               30053.637661\n",
      "Amount_Requested                  7814.420929\n",
      "Amount_Funded_By_Investors        7743.480223\n",
      "Interest_Rate                        0.041301\n",
      "Debt_To_Income_Ratio                 0.075164\n",
      "Monthly_Income                    3963.376189\n",
      "Open_Credit_Lines                    4.516687\n",
      "Revolving_Credit_Balance         18308.723678\n",
      "Inquiries_in_the_last_6months        1.235064\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(loan_intrt_data.std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ID                               0.033998\n",
      "Amount_Requested                 0.909776\n",
      "Amount_Funded_By_Investors       0.928552\n",
      "Interest_Rate                    0.307122\n",
      "Debt_To_Income_Ratio             0.153438\n",
      "Monthly_Income                   8.464849\n",
      "Open_Credit_Lines                0.883426\n",
      "Revolving_Credit_Balance         5.379520\n",
      "Inquiries_in_the_last_6months    2.030191\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(loan_intrt_data.skew())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ID                                -1.181505\n",
      "Amount_Requested                   0.301921\n",
      "Amount_Funded_By_Investors         0.414741\n",
      "Interest_Rate                     -0.417674\n",
      "Debt_To_Income_Ratio              -0.514959\n",
      "Monthly_Income                   167.354524\n",
      "Open_Credit_Lines                  1.441413\n",
      "Revolving_Credit_Balance          48.800868\n",
      "Inquiries_in_the_last_6months      6.436473\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(loan_intrt_data.kurtosis())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Correlation Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Amount_Requested</th>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <th>Interest_Rate</th>\n",
       "      <th>Debt_To_Income_Ratio</th>\n",
       "      <th>Monthly_Income</th>\n",
       "      <th>Open_Credit_Lines</th>\n",
       "      <th>Revolving_Credit_Balance</th>\n",
       "      <th>Inquiries_in_the_last_6months</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.129807</td>\n",
       "      <td>0.172535</td>\n",
       "      <td>0.240340</td>\n",
       "      <td>0.240415</td>\n",
       "      <td>0.004573</td>\n",
       "      <td>0.176874</td>\n",
       "      <td>0.076966</td>\n",
       "      <td>0.141670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Amount_Requested</th>\n",
       "      <td>0.129807</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.964836</td>\n",
       "      <td>0.334903</td>\n",
       "      <td>0.082178</td>\n",
       "      <td>0.390384</td>\n",
       "      <td>0.197074</td>\n",
       "      <td>0.294000</td>\n",
       "      <td>-0.030577</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <td>0.172535</td>\n",
       "      <td>0.964836</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.339982</td>\n",
       "      <td>0.098727</td>\n",
       "      <td>0.372001</td>\n",
       "      <td>0.190009</td>\n",
       "      <td>0.264346</td>\n",
       "      <td>-0.068574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Interest_Rate</th>\n",
       "      <td>0.240340</td>\n",
       "      <td>0.334903</td>\n",
       "      <td>0.339982</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.168604</td>\n",
       "      <td>0.016809</td>\n",
       "      <td>0.090567</td>\n",
       "      <td>0.061837</td>\n",
       "      <td>0.161515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Debt_To_Income_Ratio</th>\n",
       "      <td>0.240415</td>\n",
       "      <td>0.082178</td>\n",
       "      <td>0.098727</td>\n",
       "      <td>0.168604</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.163904</td>\n",
       "      <td>0.368262</td>\n",
       "      <td>0.187780</td>\n",
       "      <td>0.006425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Monthly_Income</th>\n",
       "      <td>0.004573</td>\n",
       "      <td>0.390384</td>\n",
       "      <td>0.372001</td>\n",
       "      <td>0.016809</td>\n",
       "      <td>-0.163904</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.169300</td>\n",
       "      <td>0.357377</td>\n",
       "      <td>0.035650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Open_Credit_Lines</th>\n",
       "      <td>0.176874</td>\n",
       "      <td>0.197074</td>\n",
       "      <td>0.190009</td>\n",
       "      <td>0.090567</td>\n",
       "      <td>0.368262</td>\n",
       "      <td>0.169300</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.291094</td>\n",
       "      <td>0.107789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Revolving_Credit_Balance</th>\n",
       "      <td>0.076966</td>\n",
       "      <td>0.294000</td>\n",
       "      <td>0.264346</td>\n",
       "      <td>0.061837</td>\n",
       "      <td>0.187780</td>\n",
       "      <td>0.357377</td>\n",
       "      <td>0.291094</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.009803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Inquiries_in_the_last_6months</th>\n",
       "      <td>0.141670</td>\n",
       "      <td>-0.030577</td>\n",
       "      <td>-0.068574</td>\n",
       "      <td>0.161515</td>\n",
       "      <td>0.006425</td>\n",
       "      <td>0.035650</td>\n",
       "      <td>0.107789</td>\n",
       "      <td>0.009803</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     ID  Amount_Requested  \\\n",
       "ID                             1.000000          0.129807   \n",
       "Amount_Requested               0.129807          1.000000   \n",
       "Amount_Funded_By_Investors     0.172535          0.964836   \n",
       "Interest_Rate                  0.240340          0.334903   \n",
       "Debt_To_Income_Ratio           0.240415          0.082178   \n",
       "Monthly_Income                 0.004573          0.390384   \n",
       "Open_Credit_Lines              0.176874          0.197074   \n",
       "Revolving_Credit_Balance       0.076966          0.294000   \n",
       "Inquiries_in_the_last_6months  0.141670         -0.030577   \n",
       "\n",
       "                               Amount_Funded_By_Investors  Interest_Rate  \\\n",
       "ID                                               0.172535       0.240340   \n",
       "Amount_Requested                                 0.964836       0.334903   \n",
       "Amount_Funded_By_Investors                       1.000000       0.339982   \n",
       "Interest_Rate                                    0.339982       1.000000   \n",
       "Debt_To_Income_Ratio                             0.098727       0.168604   \n",
       "Monthly_Income                                   0.372001       0.016809   \n",
       "Open_Credit_Lines                                0.190009       0.090567   \n",
       "Revolving_Credit_Balance                         0.264346       0.061837   \n",
       "Inquiries_in_the_last_6months                   -0.068574       0.161515   \n",
       "\n",
       "                               Debt_To_Income_Ratio  Monthly_Income  \\\n",
       "ID                                         0.240415        0.004573   \n",
       "Amount_Requested                           0.082178        0.390384   \n",
       "Amount_Funded_By_Investors                 0.098727        0.372001   \n",
       "Interest_Rate                              0.168604        0.016809   \n",
       "Debt_To_Income_Ratio                       1.000000       -0.163904   \n",
       "Monthly_Income                            -0.163904        1.000000   \n",
       "Open_Credit_Lines                          0.368262        0.169300   \n",
       "Revolving_Credit_Balance                   0.187780        0.357377   \n",
       "Inquiries_in_the_last_6months              0.006425        0.035650   \n",
       "\n",
       "                               Open_Credit_Lines  Revolving_Credit_Balance  \\\n",
       "ID                                      0.176874                  0.076966   \n",
       "Amount_Requested                        0.197074                  0.294000   \n",
       "Amount_Funded_By_Investors              0.190009                  0.264346   \n",
       "Interest_Rate                           0.090567                  0.061837   \n",
       "Debt_To_Income_Ratio                    0.368262                  0.187780   \n",
       "Monthly_Income                          0.169300                  0.357377   \n",
       "Open_Credit_Lines                       1.000000                  0.291094   \n",
       "Revolving_Credit_Balance                0.291094                  1.000000   \n",
       "Inquiries_in_the_last_6months           0.107789                  0.009803   \n",
       "\n",
       "                               Inquiries_in_the_last_6months  \n",
       "ID                                                  0.141670  \n",
       "Amount_Requested                                   -0.030577  \n",
       "Amount_Funded_By_Investors                         -0.068574  \n",
       "Interest_Rate                                       0.161515  \n",
       "Debt_To_Income_Ratio                                0.006425  \n",
       "Monthly_Income                                      0.035650  \n",
       "Open_Credit_Lines                                   0.107789  \n",
       "Revolving_Credit_Balance                            0.009803  \n",
       "Inquiries_in_the_last_6months                       1.000000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2ccc37d35e0>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corr = loan_intrt_data.corr()\n",
    "display(corr)\n",
    "sns.heatmap(corr, annot=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    ### Amount_Requested and Amoumt_Requested_By_Investors are correlated"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. DATA CLEANING & FORMATTING"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### A. Missing Values Identification & Treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID                                1\n",
       "Amount_Requested                  0\n",
       "Amount_Funded_By_Investors        0\n",
       "Interest_Rate                     0\n",
       "Loan_Length                       1\n",
       "Loan_Purpose                      1\n",
       "Debt_To_Income_Ratio              0\n",
       "Home_Ownership                    1\n",
       "Monthly_Income                    0\n",
       "Open_Credit_Lines                 0\n",
       "Revolving_Credit_Balance          0\n",
       "Inquiries_in_the_last_6months     0\n",
       "Employment_Length                78\n",
       "FICO_Score                        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_intrt_data.isnull().sum(axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    Missing value found in the following features:\n",
    "    * num_columns = ID (will be dropped)\n",
    "    * cat_columns = Loan_Length, Loan_Purpose, Home_Ownership, Employment_Length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2500, 14)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_data = loan_intrt_data.copy()     #------ copy dataset \n",
    "loan_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Amount_Requested', 'Amount_Funded_By_Investors', 'Interest_Rate',\n",
       "       'Loan_Length', 'Loan_Purpose', 'Debt_To_Income_Ratio', 'Home_Ownership',\n",
       "       'Monthly_Income', 'Open_Credit_Lines', 'Revolving_Credit_Balance',\n",
       "       'Inquiries_in_the_last_6months', 'Employment_Length', 'FICO_Score'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_data = loan_data.drop(['ID'], axis=1)  #--- drop ID\n",
    "loan_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting Numerical & Categorical columns\n",
    "\n",
    "#loan_data_num_cols = final dataset with Numerical columns\n",
    "#loan_data_cat_cols = final dataset with Categorical columns\n",
    "with_num_cols_data = loan_data[loan_data.select_dtypes(include=[np.number]).columns.tolist()]\n",
    "with_cat_cols_data = loan_data[loan_data.select_dtypes(exclude=[np.number]).columns.tolist()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Amount_Requested</th>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <th>Interest_Rate</th>\n",
       "      <th>Debt_To_Income_Ratio</th>\n",
       "      <th>Monthly_Income</th>\n",
       "      <th>Open_Credit_Lines</th>\n",
       "      <th>Revolving_Credit_Balance</th>\n",
       "      <th>Inquiries_in_the_last_6months</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20000</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.15</td>\n",
       "      <td>6541.67</td>\n",
       "      <td>14</td>\n",
       "      <td>14272</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19200</td>\n",
       "      <td>19200.0</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.28</td>\n",
       "      <td>4583.33</td>\n",
       "      <td>12</td>\n",
       "      <td>11140</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35000</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.24</td>\n",
       "      <td>11500.00</td>\n",
       "      <td>14</td>\n",
       "      <td>21977</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10000</td>\n",
       "      <td>9975.0</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.14</td>\n",
       "      <td>3833.33</td>\n",
       "      <td>10</td>\n",
       "      <td>9346</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12000</td>\n",
       "      <td>12000.0</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.19</td>\n",
       "      <td>3195.00</td>\n",
       "      <td>11</td>\n",
       "      <td>14469</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Amount_Requested  Amount_Funded_By_Investors  Interest_Rate  \\\n",
       "0             20000                     20000.0           0.09   \n",
       "1             19200                     19200.0           0.12   \n",
       "2             35000                     35000.0           0.22   \n",
       "3             10000                      9975.0           0.10   \n",
       "4             12000                     12000.0           0.12   \n",
       "\n",
       "   Debt_To_Income_Ratio  Monthly_Income  Open_Credit_Lines  \\\n",
       "0                  0.15         6541.67                 14   \n",
       "1                  0.28         4583.33                 12   \n",
       "2                  0.24        11500.00                 14   \n",
       "3                  0.14         3833.33                 10   \n",
       "4                  0.19         3195.00                 11   \n",
       "\n",
       "   Revolving_Credit_Balance  Inquiries_in_the_last_6months  \n",
       "0                     14272                              2  \n",
       "1                     11140                              1  \n",
       "2                     21977                              1  \n",
       "3                      9346                              0  \n",
       "4                     14469                              0  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with_num_cols_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Amount_Requested', 'Amount_Funded_By_Investors', 'Interest_Rate',\n",
       "       'Debt_To_Income_Ratio', 'Monthly_Income', 'Open_Credit_Lines',\n",
       "       'Revolving_Credit_Balance', 'Inquiries_in_the_last_6months'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with_num_cols_data.columns  #numerical columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Loan_Length', 'Loan_Purpose', 'Home_Ownership', 'Employment_Length',\n",
       "       'FICO_Score'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with_cat_cols_data.columns   #categorical columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Checking for missing value in Numerical features and treating them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Independent Variable:  Amount_Requested\n",
      "Check if there are any missing value in variable Amount_Requested : \n",
      "No missing values found in  Amount_Requested\n",
      "\n",
      "Independent Variable:  Amount_Funded_By_Investors\n",
      "Check if there are any missing value in variable Amount_Funded_By_Investors : \n",
      "No missing values found in  Amount_Funded_By_Investors\n",
      "\n",
      "Independent Variable:  Interest_Rate\n",
      "Check if there are any missing value in variable Interest_Rate : \n",
      "No missing values found in  Interest_Rate\n",
      "\n",
      "Independent Variable:  Debt_To_Income_Ratio\n",
      "Check if there are any missing value in variable Debt_To_Income_Ratio : \n",
      "No missing values found in  Debt_To_Income_Ratio\n",
      "\n",
      "Independent Variable:  Monthly_Income\n",
      "Check if there are any missing value in variable Monthly_Income : \n",
      "No missing values found in  Monthly_Income\n",
      "\n",
      "Independent Variable:  Open_Credit_Lines\n",
      "Check if there are any missing value in variable Open_Credit_Lines : \n",
      "No missing values found in  Open_Credit_Lines\n",
      "\n",
      "Independent Variable:  Revolving_Credit_Balance\n",
      "Check if there are any missing value in variable Revolving_Credit_Balance : \n",
      "No missing values found in  Revolving_Credit_Balance\n",
      "\n",
      "Independent Variable:  Inquiries_in_the_last_6months\n",
      "Check if there are any missing value in variable Inquiries_in_the_last_6months : \n",
      "No missing values found in  Inquiries_in_the_last_6months\n",
      "\n"
     ]
    }
   ],
   "source": [
    "treat_num_columns(with_num_cols_data.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Checking for missing value in Categorical features and treating them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Independent Variable:  Loan_Length\n",
      "Check if there are any missing value in variable Loan_Length : \n",
      "No. of Observations with missing value:  1\n",
      "After treating the missing values\n",
      "No. of Observations with missing value:  0\n",
      "\n",
      "Independent Variable:  Loan_Purpose\n",
      "Check if there are any missing value in variable Loan_Purpose : \n",
      "No. of Observations with missing value:  1\n",
      "After treating the missing values\n",
      "No. of Observations with missing value:  0\n",
      "\n",
      "Independent Variable:  Home_Ownership\n",
      "Check if there are any missing value in variable Home_Ownership : \n",
      "No. of Observations with missing value:  1\n",
      "After treating the missing values\n",
      "No. of Observations with missing value:  0\n",
      "\n",
      "Independent Variable:  Employment_Length\n",
      "Check if there are any missing value in variable Employment_Length : \n",
      "No. of Observations with missing value:  78\n",
      "After treating the missing values\n",
      "No. of Observations with missing value:  0\n",
      "\n",
      "Independent Variable:  FICO_Score\n",
      "Check if there are any missing value in variable FICO_Score : \n",
      "No missing values found in  FICO_Score\n",
      "\n"
     ]
    }
   ],
   "source": [
    "treat_cat_columns(with_cat_cols_data.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Amount_Requested                 0\n",
       "Amount_Funded_By_Investors       0\n",
       "Interest_Rate                    0\n",
       "Loan_Length                      0\n",
       "Loan_Purpose                     0\n",
       "Debt_To_Income_Ratio             0\n",
       "Home_Ownership                   0\n",
       "Monthly_Income                   0\n",
       "Open_Credit_Lines                0\n",
       "Revolving_Credit_Balance         0\n",
       "Inquiries_in_the_last_6months    0\n",
       "Employment_Length                0\n",
       "FICO_Score                       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_data.isnull().sum(axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### B. Outlier Identification & Treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------#######------- Amount_Requested ------######------\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Q1:  6000.0\n",
      "Q2:  10000.0\n",
      "Q3:  17000.0\n",
      "IQR:  11000.0\n",
      "Lower Level:  -10500.0\n",
      "Upper Level:  33500.0\n",
      "     \n",
      "-------#######------- Amount_Funded_By_Investors ------######------\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Q1:  6000.0\n",
      "Q2:  10000.0\n",
      "Q3:  16000.0\n",
      "IQR:  10000.0\n",
      "Lower Level:  -9000.0\n",
      "Upper Level:  31000.0\n",
      "     \n",
      "-------#######------- Interest_Rate ------######------\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Q1:  0.1\n",
      "Q2:  0.13\n",
      "Q3:  0.16\n",
      "IQR:  0.06\n",
      "Lower Level:  0.010000000000000009\n",
      "Upper Level:  0.25\n",
      "     \n",
      "-------#######------- Debt_To_Income_Ratio ------######------\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Q1:  0.1\n",
      "Q2:  0.15\n",
      "Q3:  0.21\n",
      "IQR:  0.10999999999999999\n",
      "Lower Level:  -0.06499999999999997\n",
      "Upper Level:  0.375\n",
      "     \n",
      "-------#######------- Monthly_Income ------######------\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Q1:  3474.2675000000004\n",
      "Q2:  5000.0\n",
      "Q3:  6800.0\n",
      "IQR:  3325.7324999999996\n",
      "Lower Level:  -1514.3312499999988\n",
      "Upper Level:  11788.59875\n",
      "     \n",
      "-------#######------- Open_Credit_Lines ------######------\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Q1:  7.0\n",
      "Q2:  9.0\n",
      "Q3:  13.0\n",
      "IQR:  6.0\n",
      "Lower Level:  -2.0\n",
      "Upper Level:  22.0\n",
      "     \n",
      "-------#######------- Revolving_Credit_Balance ------######------\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Q1:  5545.25\n",
      "Q2:  10938.0\n",
      "Q3:  18870.25\n",
      "IQR:  13325.0\n",
      "Lower Level:  -14442.25\n",
      "Upper Level:  38857.75\n",
      "     \n",
      "-------#######------- Inquiries_in_the_last_6months ------######------\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Q1:  0.0\n",
      "Q2:  1.0\n",
      "Q3:  1.0\n",
      "IQR:  1.0\n",
      "Lower Level:  -1.5\n",
      "Upper Level:  2.5\n",
      "     \n"
     ]
    }
   ],
   "source": [
    "find_outliers(with_num_cols_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_scatter(with_num_cols_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    Inference:\n",
    "    With the help of the scatterplot, we can identify the presence of outliers in the followig variables:\n",
    "    i. Monthly_Income\n",
    "    ii. Open_Credit_Lines\n",
    "    iii. Revolving_Credit_Balance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Outlier Treatment:\n",
    "\n",
    "\n",
    "    DT, RF, ENsemble methods are not sensitive to outliers. Hence we will not treat them. \n",
    "    Also, the variance in the data will not have impact on model performance, hence scaling is not required for these models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "col_list = ['Amount_Funded_By_Investors', 'Amount_Requested', 'Open_Credit_Lines']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Q1:  6000.0\n",
      "Q2:  10000.0\n",
      "Q3:  16000.0\n",
      "IQR:  10000.0\n",
      "Lower Level:  -9000.0\n",
      "Upper Level:  31000.0\n",
      "     \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-5-f004b4843f8b>:22: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  get_data[col_name] = np.where(get_data[col_name] > upper_limit, upper_limit, get_data[col_name])  ### values more than Upper Limit value, are replaced by Upper Limit value\n",
      "<ipython-input-5-f004b4843f8b>:23: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  get_data[col_name] = np.where(get_data[col_name] < low_limit, low_limit, get_data[col_name])    ### values lower than Lower Limit value, are replaced by Lower Limit value\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Q1:  6000.0\n",
      "Q2:  10000.0\n",
      "Q3:  17000.0\n",
      "IQR:  11000.0\n",
      "Lower Level:  -10500.0\n",
      "Upper Level:  33500.0\n",
      "     \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-5-f004b4843f8b>:22: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  get_data[col_name] = np.where(get_data[col_name] > upper_limit, upper_limit, get_data[col_name])  ### values more than Upper Limit value, are replaced by Upper Limit value\n",
      "<ipython-input-5-f004b4843f8b>:23: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  get_data[col_name] = np.where(get_data[col_name] < low_limit, low_limit, get_data[col_name])    ### values lower than Lower Limit value, are replaced by Lower Limit value\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Q1:  7.0\n",
      "Q2:  9.0\n",
      "Q3:  13.0\n",
      "IQR:  6.0\n",
      "Lower Level:  -2.0\n",
      "Upper Level:  22.0\n",
      "     \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-5-f004b4843f8b>:22: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  get_data[col_name] = np.where(get_data[col_name] > upper_limit, upper_limit, get_data[col_name])  ### values more than Upper Limit value, are replaced by Upper Limit value\n",
      "<ipython-input-5-f004b4843f8b>:23: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  get_data[col_name] = np.where(get_data[col_name] < low_limit, low_limit, get_data[col_name])    ### values lower than Lower Limit value, are replaced by Lower Limit value\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "treat_outliers(with_num_cols_data, col_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "tarin_pred"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### C. Feature Engineering & Feature Scaling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Numeric Columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Amount_Requested</th>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <th>Interest_Rate</th>\n",
       "      <th>Debt_To_Income_Ratio</th>\n",
       "      <th>Monthly_Income</th>\n",
       "      <th>Open_Credit_Lines</th>\n",
       "      <th>Revolving_Credit_Balance</th>\n",
       "      <th>Inquiries_in_the_last_6months</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20000.0</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.15</td>\n",
       "      <td>6541.67</td>\n",
       "      <td>14.0</td>\n",
       "      <td>14272</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19200.0</td>\n",
       "      <td>19200.0</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.28</td>\n",
       "      <td>4583.33</td>\n",
       "      <td>12.0</td>\n",
       "      <td>11140</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>33500.0</td>\n",
       "      <td>31000.0</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.24</td>\n",
       "      <td>11500.00</td>\n",
       "      <td>14.0</td>\n",
       "      <td>21977</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10000.0</td>\n",
       "      <td>9975.0</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.14</td>\n",
       "      <td>3833.33</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9346</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12000.0</td>\n",
       "      <td>12000.0</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.19</td>\n",
       "      <td>3195.00</td>\n",
       "      <td>11.0</td>\n",
       "      <td>14469</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Amount_Requested  Amount_Funded_By_Investors  Interest_Rate  \\\n",
       "0           20000.0                     20000.0           0.09   \n",
       "1           19200.0                     19200.0           0.12   \n",
       "2           33500.0                     31000.0           0.22   \n",
       "3           10000.0                      9975.0           0.10   \n",
       "4           12000.0                     12000.0           0.12   \n",
       "\n",
       "   Debt_To_Income_Ratio  Monthly_Income  Open_Credit_Lines  \\\n",
       "0                  0.15         6541.67               14.0   \n",
       "1                  0.28         4583.33               12.0   \n",
       "2                  0.24        11500.00               14.0   \n",
       "3                  0.14         3833.33               10.0   \n",
       "4                  0.19         3195.00               11.0   \n",
       "\n",
       "   Revolving_Credit_Balance  Inquiries_in_the_last_6months  \n",
       "0                     14272                              2  \n",
       "1                     11140                              1  \n",
       "2                     21977                              1  \n",
       "3                      9346                              0  \n",
       "4                     14469                              0  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with_num_cols_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC43FC340>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC43FB7F0>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC411AC40>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC416F130>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC431B6A0>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC42118B0>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC42119A0>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC4599E50>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC42875E0>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x360 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "with_num_cols_data.hist(figsize=(14, 5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "tarin"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Feature Engineering - Power Transformation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "cols_to_transform = ['Amount_Requested','Amount_Funded_By_Investors','Open_Credit_Lines','Monthly_Income', 'Revolving_Credit_Balance']\n",
    "#cols_to_scale = ['Inquiries_in_the_last_6months']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC453CCD0>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC430CAC0>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC45E91C0>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC41CEEE0>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC42ED370>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC41A1970>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x360 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "with_num_cols_data[cols_to_transform].hist(figsize=(14, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "#with_num_cols_data[cols_to_scale].hist(figsize=(14, 5))kkkk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\RONALD\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:2963: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self[k1] = value[k2]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC4424880>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC56BBF10>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC56A3A30>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC4432E50>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC43D5370>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC4256E80>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x360 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.preprocessing import PowerTransformer\n",
    "\n",
    "pt = PowerTransformer()\n",
    "\n",
    "with_num_cols_data[cols_to_transform] = pd.DataFrame(pt.fit_transform(with_num_cols_data[cols_to_transform]), columns=cols_to_transform)\n",
    "\n",
    "with_num_cols_data[cols_to_transform].hist(figsize=(14, 5))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Amount_Requested              1.0004\n",
       "Amount_Funded_By_Investors    1.0004\n",
       "Open_Credit_Lines             1.0004\n",
       "Monthly_Income                1.0004\n",
       "Revolving_Credit_Balance      1.0004\n",
       "dtype: float64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with_num_cols_data[cols_to_transform].var()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>skew</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Amount_Requested</th>\n",
       "      <td>-0.040097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <td>-0.038743</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Open_Credit_Lines</th>\n",
       "      <td>-0.017916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Monthly_Income</th>\n",
       "      <td>-0.010300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Revolving_Credit_Balance</th>\n",
       "      <td>0.154902</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                skew\n",
       "Amount_Requested           -0.040097\n",
       "Amount_Funded_By_Investors -0.038743\n",
       "Open_Credit_Lines          -0.017916\n",
       "Monthly_Income             -0.010300\n",
       "Revolving_Credit_Balance    0.154902"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with_num_cols_data[cols_to_transform].agg(['skew']).transpose()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "ss = StandardScaler()\n",
    "\n",
    "# Fit\n",
    "ss.fit(with_num_cols_data[cols_to_scale])\n",
    "\n",
    "# Transform\n",
    "with_num_cols_data[cols_to_scale] = pd.DataFrame(ss.transform(with_num_cols_data[cols_to_scale]), columns=[cols_to_scale])\n",
    "\n",
    "with_num_cols_data[cols_to_scale].hist(figsize=(5,5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "with_num_cols_data[cols_to_scale].var()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "with_num_cols_data[cols_to_scale].agg(['skew']).transpose()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Overall Numeric Column Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC589E9A0>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC5CD17F0>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC5B3DC40>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC5B69130>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC5B9D910>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC5BC8130>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC5BD5100>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC5BFC8E0>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000002CCC5C5B6D0>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1008x360 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "with_num_cols_data.hist(figsize=(14, 5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Column: Inquiries_in_the_last_6months (Binning Technique)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2ccc5f12730>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(with_num_cols_data['Inquiries_in_the_last_6months'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Feature scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Amount_Requested</th>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <th>Interest_Rate</th>\n",
       "      <th>Debt_To_Income_Ratio</th>\n",
       "      <th>Monthly_Income</th>\n",
       "      <th>Open_Credit_Lines</th>\n",
       "      <th>Revolving_Credit_Balance</th>\n",
       "      <th>Inquiries_in_the_last_6months</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.027044</td>\n",
       "      <td>1.079088</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.556836</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>0.271966</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.953494</td>\n",
       "      <td>1.002043</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.28</td>\n",
       "      <td>-0.119300</td>\n",
       "      <td>0.560697</td>\n",
       "      <td>0.028440</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.043753</td>\n",
       "      <td>1.995000</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.24</td>\n",
       "      <td>1.598158</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>0.743101</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.100780</td>\n",
       "      <td>-0.069295</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.14</td>\n",
       "      <td>-0.464711</td>\n",
       "      <td>0.131958</td>\n",
       "      <td>-0.133290</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.172163</td>\n",
       "      <td>0.203890</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.19</td>\n",
       "      <td>-0.820852</td>\n",
       "      <td>0.352453</td>\n",
       "      <td>0.285989</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Amount_Requested  Amount_Funded_By_Investors  Interest_Rate  \\\n",
       "0          1.027044                    1.079088           0.09   \n",
       "1          0.953494                    1.002043           0.12   \n",
       "2          2.043753                    1.995000           0.22   \n",
       "3         -0.100780                   -0.069295           0.10   \n",
       "4          0.172163                    0.203890           0.12   \n",
       "\n",
       "   Debt_To_Income_Ratio  Monthly_Income  Open_Credit_Lines  \\\n",
       "0                  0.15        0.556836           0.946340   \n",
       "1                  0.28       -0.119300           0.560697   \n",
       "2                  0.24        1.598158           0.946340   \n",
       "3                  0.14       -0.464711           0.131958   \n",
       "4                  0.19       -0.820852           0.352453   \n",
       "\n",
       "   Revolving_Credit_Balance  Inquiries_in_the_last_6months  \n",
       "0                  0.271966                              2  \n",
       "1                  0.028440                              1  \n",
       "2                  0.743101                              1  \n",
       "3                 -0.133290                              0  \n",
       "4                  0.285989                              0  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with_num_cols_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "train_num_cols = with_num_cols_data.drop(['Interest_Rate'], axis=1)\n",
    "train_num_cols.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "cols_train = []\n",
    "cols_train=train_num_cols.columns\n",
    "cols_train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "scaler = StandardScaler()\n",
    "\n",
    "train_num_cols = scaler.fit_transform(train_num_cols.values)\n",
    "train_num_cols = pd.DataFrame(train_num_cols, columns = cols_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "train_num_cols.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Categorical Columns: Label Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\RONALD\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py:5303: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self[name] = value\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "#with_cat_cols_data['Employment_Length'] = with_cat_cols_data['Employment_Length'].apply(LabelEncoder().fit_transform)\n",
    "\n",
    "with_cat_cols_data.Loan_Length=(LabelEncoder().fit_transform(with_cat_cols_data.Loan_Length))\n",
    "with_cat_cols_data.Loan_Purpose=(LabelEncoder().fit_transform(with_cat_cols_data.Loan_Purpose))\n",
    "with_cat_cols_data.Home_Ownership=(LabelEncoder().fit_transform(with_cat_cols_data.Home_Ownership))\n",
    "with_cat_cols_data.Employment_Length=(LabelEncoder().fit_transform(with_cat_cols_data.Employment_Length))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan_Length</th>\n",
       "      <th>Loan_Purpose</th>\n",
       "      <th>Home_Ownership</th>\n",
       "      <th>Employment_Length</th>\n",
       "      <th>FICO_Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>735-739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>715-719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>690-694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>695-699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>695-699</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Loan_Length  Loan_Purpose  Home_Ownership  Employment_Length FICO_Score\n",
       "0            0             2               0                  0    735-739\n",
       "1            0             2               0                  2    715-719\n",
       "2            1             2               0                  2    690-694\n",
       "3            0             2               0                  5    695-699\n",
       "4            0             1               4                  9    695-699"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with_cat_cols_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Column: FICO Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "mapping = {'670-674':'Good', '675-679':'Good', '680-684':'Good',\n",
    "           '695-699' : 'Good', '665-669' : 'Fair', '690-694' : 'Good',\n",
    "           '685-689' : 'Good', '705-709' : 'Good', '700-704' : 'Good',\n",
    "           '660-664' : 'Fair', '720-724' : 'Good', '710-714' : 'Good',\n",
    "           '725-729' : 'Good', '730-734' : 'Good', '715-719' : 'Good',\n",
    "           '735-739' : 'Good', '750-754' : 'Very Good', '745-749' : 'Very Good',\n",
    "           '740-744' : 'Very Good', '755-759' : 'Very Good', '760-764' : 'Very Good',\n",
    "           '765-769' : 'Very Good', '780-784' : 'Very Good', '775-779' : 'Very Good',\n",
    "           '790-794' : 'Very Good', '785-789' : 'Very Good', '770-774' : 'Very Good',\n",
    "           '795-799' : 'Very Good', '800-804' : 'Exceptional', '805-809' : 'Exceptional',\n",
    "           '810-814' : 'Exceptional', '815-819' : 'Exceptional', '640-644' : 'Fair',\n",
    "           '655-659' : 'Fair', '645-649' : 'Fair', '830-834' : 'Exceptional',\n",
    "           '820-824' : 'Exceptional', '650-654' : 'Fair'\n",
    "\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-45-4e75959089ce>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  with_cat_cols_data['FICO_Score_mapped'] = with_cat_cols_data['FICO_Score'].map(mapping)\n"
     ]
    }
   ],
   "source": [
    "with_cat_cols_data['FICO_Score_mapped'] = with_cat_cols_data['FICO_Score'].map(mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan_Length</th>\n",
       "      <th>Loan_Purpose</th>\n",
       "      <th>Home_Ownership</th>\n",
       "      <th>Employment_Length</th>\n",
       "      <th>FICO_Score</th>\n",
       "      <th>FICO_Score_mapped</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>735-739</td>\n",
       "      <td>Good</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>715-719</td>\n",
       "      <td>Good</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>690-694</td>\n",
       "      <td>Good</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>695-699</td>\n",
       "      <td>Good</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>695-699</td>\n",
       "      <td>Good</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Loan_Length  Loan_Purpose  Home_Ownership  Employment_Length FICO_Score  \\\n",
       "0            0             2               0                  0    735-739   \n",
       "1            0             2               0                  2    715-719   \n",
       "2            1             2               0                  2    690-694   \n",
       "3            0             2               0                  5    695-699   \n",
       "4            0             1               4                  9    695-699   \n",
       "\n",
       "  FICO_Score_mapped  \n",
       "0              Good  \n",
       "1              Good  \n",
       "2              Good  \n",
       "3              Good  \n",
       "4              Good  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with_cat_cols_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "scale_mapper = {'Fair': 0, 'Good': 1, 'Very Good': 2, 'Exceptional': 3}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-48-876574c78b7b>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  with_cat_cols_data['FICO_Score_Scaled'] = with_cat_cols_data['FICO_Score_mapped'].replace(scale_mapper)\n"
     ]
    }
   ],
   "source": [
    "with_cat_cols_data['FICO_Score_Scaled'] = with_cat_cols_data['FICO_Score_mapped'].replace(scale_mapper)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "cat_features_data_dummies['FICO_Score_Scaled'] = with_cat_cols_data['FICO_Score_Scaled']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan_Length</th>\n",
       "      <th>Loan_Purpose</th>\n",
       "      <th>Home_Ownership</th>\n",
       "      <th>Employment_Length</th>\n",
       "      <th>FICO_Score</th>\n",
       "      <th>FICO_Score_mapped</th>\n",
       "      <th>FICO_Score_Scaled</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>735-739</td>\n",
       "      <td>Good</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>715-719</td>\n",
       "      <td>Good</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>690-694</td>\n",
       "      <td>Good</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>695-699</td>\n",
       "      <td>Good</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>695-699</td>\n",
       "      <td>Good</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Loan_Length  Loan_Purpose  Home_Ownership  Employment_Length FICO_Score  \\\n",
       "0            0             2               0                  0    735-739   \n",
       "1            0             2               0                  2    715-719   \n",
       "2            1             2               0                  2    690-694   \n",
       "3            0             2               0                  5    695-699   \n",
       "4            0             1               4                  9    695-699   \n",
       "\n",
       "  FICO_Score_mapped  FICO_Score_Scaled  \n",
       "0              Good                  1  \n",
       "1              Good                  1  \n",
       "2              Good                  1  \n",
       "3              Good                  1  \n",
       "4              Good                  1  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with_cat_cols_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_features = ['Loan_Length','Loan_Purpose','Home_Ownership','Employment_Length','FICO_Score_Scaled']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_cols_final = with_cat_cols_data[cat_features]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan_Length</th>\n",
       "      <th>Loan_Purpose</th>\n",
       "      <th>Home_Ownership</th>\n",
       "      <th>Employment_Length</th>\n",
       "      <th>FICO_Score_Scaled</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Loan_Length  Loan_Purpose  Home_Ownership  Employment_Length  \\\n",
       "0            0             2               0                  0   \n",
       "1            0             2               0                  2   \n",
       "2            1             2               0                  2   \n",
       "3            0             2               0                  5   \n",
       "4            0             1               4                  9   \n",
       "\n",
       "   FICO_Score_Scaled  \n",
       "0                  1  \n",
       "1                  1  \n",
       "2                  1  \n",
       "3                  1  \n",
       "4                  1  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_cols_final.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Combining Numerical Columns and Categorical Columns into an updated dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Amount_Requested', 'Amount_Funded_By_Investors', 'Interest_Rate',\n",
       "       'Debt_To_Income_Ratio', 'Monthly_Income', 'Open_Credit_Lines',\n",
       "       'Revolving_Credit_Balance', 'Inquiries_in_the_last_6months'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with_num_cols_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Amount_Requested</th>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <th>Interest_Rate</th>\n",
       "      <th>Debt_To_Income_Ratio</th>\n",
       "      <th>Monthly_Income</th>\n",
       "      <th>Open_Credit_Lines</th>\n",
       "      <th>Revolving_Credit_Balance</th>\n",
       "      <th>Inquiries_in_the_last_6months</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.027044</td>\n",
       "      <td>1.079088</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.556836</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>0.271966</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.953494</td>\n",
       "      <td>1.002043</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.28</td>\n",
       "      <td>-0.119300</td>\n",
       "      <td>0.560697</td>\n",
       "      <td>0.028440</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.043753</td>\n",
       "      <td>1.995000</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.24</td>\n",
       "      <td>1.598158</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>0.743101</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.100780</td>\n",
       "      <td>-0.069295</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.14</td>\n",
       "      <td>-0.464711</td>\n",
       "      <td>0.131958</td>\n",
       "      <td>-0.133290</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.172163</td>\n",
       "      <td>0.203890</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.19</td>\n",
       "      <td>-0.820852</td>\n",
       "      <td>0.352453</td>\n",
       "      <td>0.285989</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Amount_Requested  Amount_Funded_By_Investors  Interest_Rate  \\\n",
       "0          1.027044                    1.079088           0.09   \n",
       "1          0.953494                    1.002043           0.12   \n",
       "2          2.043753                    1.995000           0.22   \n",
       "3         -0.100780                   -0.069295           0.10   \n",
       "4          0.172163                    0.203890           0.12   \n",
       "\n",
       "   Debt_To_Income_Ratio  Monthly_Income  Open_Credit_Lines  \\\n",
       "0                  0.15        0.556836           0.946340   \n",
       "1                  0.28       -0.119300           0.560697   \n",
       "2                  0.24        1.598158           0.946340   \n",
       "3                  0.14       -0.464711           0.131958   \n",
       "4                  0.19       -0.820852           0.352453   \n",
       "\n",
       "   Revolving_Credit_Balance  Inquiries_in_the_last_6months  \n",
       "0                  0.271966                              2  \n",
       "1                  0.028440                              1  \n",
       "2                  0.743101                              1  \n",
       "3                 -0.133290                              0  \n",
       "4                  0.285989                              0  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with_num_cols_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "train_target = with_num_cols_data['Interest_Rate']\n",
    "train_target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Amount_Requested</th>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <th>Interest_Rate</th>\n",
       "      <th>Debt_To_Income_Ratio</th>\n",
       "      <th>Monthly_Income</th>\n",
       "      <th>Open_Credit_Lines</th>\n",
       "      <th>Revolving_Credit_Balance</th>\n",
       "      <th>Inquiries_in_the_last_6months</th>\n",
       "      <th>Loan_Length</th>\n",
       "      <th>Loan_Purpose</th>\n",
       "      <th>Home_Ownership</th>\n",
       "      <th>Employment_Length</th>\n",
       "      <th>FICO_Score_Scaled</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.027044</td>\n",
       "      <td>1.079088</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.556836</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>0.271966</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.953494</td>\n",
       "      <td>1.002043</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.28</td>\n",
       "      <td>-0.119300</td>\n",
       "      <td>0.560697</td>\n",
       "      <td>0.028440</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.043753</td>\n",
       "      <td>1.995000</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.24</td>\n",
       "      <td>1.598158</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>0.743101</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.100780</td>\n",
       "      <td>-0.069295</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.14</td>\n",
       "      <td>-0.464711</td>\n",
       "      <td>0.131958</td>\n",
       "      <td>-0.133290</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.172163</td>\n",
       "      <td>0.203890</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.19</td>\n",
       "      <td>-0.820852</td>\n",
       "      <td>0.352453</td>\n",
       "      <td>0.285989</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Amount_Requested  Amount_Funded_By_Investors  Interest_Rate  \\\n",
       "0          1.027044                    1.079088           0.09   \n",
       "1          0.953494                    1.002043           0.12   \n",
       "2          2.043753                    1.995000           0.22   \n",
       "3         -0.100780                   -0.069295           0.10   \n",
       "4          0.172163                    0.203890           0.12   \n",
       "\n",
       "   Debt_To_Income_Ratio  Monthly_Income  Open_Credit_Lines  \\\n",
       "0                  0.15        0.556836           0.946340   \n",
       "1                  0.28       -0.119300           0.560697   \n",
       "2                  0.24        1.598158           0.946340   \n",
       "3                  0.14       -0.464711           0.131958   \n",
       "4                  0.19       -0.820852           0.352453   \n",
       "\n",
       "   Revolving_Credit_Balance  Inquiries_in_the_last_6months  Loan_Length  \\\n",
       "0                  0.271966                              2            0   \n",
       "1                  0.028440                              1            0   \n",
       "2                  0.743101                              1            1   \n",
       "3                 -0.133290                              0            0   \n",
       "4                  0.285989                              0            0   \n",
       "\n",
       "   Loan_Purpose  Home_Ownership  Employment_Length  FICO_Score_Scaled  \n",
       "0             2               0                  0                  1  \n",
       "1             2               0                  2                  1  \n",
       "2             2               0                  2                  1  \n",
       "3             2               0                  5                  1  \n",
       "4             1               4                  9                  1  "
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "updated_loan_data = pd.concat([with_num_cols_data, cat_cols_final], axis=1)\n",
    "updated_loan_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Amount_Requested', 'Amount_Funded_By_Investors', 'Interest_Rate',\n",
       "       'Debt_To_Income_Ratio', 'Monthly_Income', 'Open_Credit_Lines',\n",
       "       'Revolving_Credit_Balance', 'Inquiries_in_the_last_6months',\n",
       "       'Loan_Length', 'Loan_Purpose', 'Home_Ownership', 'Employment_Length',\n",
       "       'FICO_Score_Scaled'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "updated_loan_data.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Chec for any missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Amount_Requested                 0\n",
       "Amount_Funded_By_Investors       0\n",
       "Interest_Rate                    0\n",
       "Debt_To_Income_Ratio             0\n",
       "Monthly_Income                   0\n",
       "Open_Credit_Lines                0\n",
       "Revolving_Credit_Balance         0\n",
       "Inquiries_in_the_last_6months    0\n",
       "Loan_Length                      0\n",
       "Loan_Purpose                     0\n",
       "Home_Ownership                   0\n",
       "Employment_Length                0\n",
       "FICO_Score_Scaled                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "updated_loan_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5. DATA PARTITION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = updated_loan_data.drop(['Interest_Rate'], axis=1)\n",
    "Y = updated_loan_data['Interest_Rate']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1750, 12), (750, 12))"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6. MODEL BUILDING\n",
    "\n",
    "1. DecisionTreeRegressor\n",
    "2. RandomForestRegressor\n",
    "3. AdaBoostRegressor\n",
    "4. GradientDescentRegressor\n",
    "5. XGBoostRegressor\n",
    "6. KNNRegressor\n",
    "7. SVMRegressor"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model #1: DecisionTreeRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor()"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "\n",
    "dt_reg = DecisionTreeRegressor()\n",
    "dt_reg.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_pred = dt_reg.predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-train:  1.0\n",
      "MSE Score-train:  1.3756642459908827e-35\n",
      "MAE Score-train:  6.344131569286609e-19\n"
     ]
    }
   ],
   "source": [
    "error_dtreg_r2_train = r2_score(Y_train, train_pred)\n",
    "print('R2 Score-train: ', error_dtreg_r2_train)\n",
    "\n",
    "error_dtreg_mse_train = mean_squared_error(Y_train, train_pred)\n",
    "print('MSE Score-train: ', error_dtreg_mse_train)\n",
    "error_dtreg_mae_train = mean_absolute_error(Y_train, train_pred)\n",
    "print('MAE Score-train: ', error_dtreg_mae_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_pred = dt_reg.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-test:  0.24485126586711803\n",
      "MSE Score-test:  0.0012649333333333334\n",
      "MAE Score-test:  0.027213333333333332\n"
     ]
    }
   ],
   "source": [
    "error_dtreg_r2_test = r2_score(Y_test, test_pred)\n",
    "print('R2 Score-test: ', error_dtreg_r2_test)\n",
    "\n",
    "error_dtreg_mse_test = mean_squared_error(Y_test, test_pred)\n",
    "print('MSE Score-test: ', error_dtreg_mse_test)\n",
    "error_dtreg_mae_test = mean_absolute_error(Y_test, test_pred)\n",
    "print('MAE Score-test: ', error_dtreg_mae_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Predicted_dtreg_tst']=test_pred"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    Inference:\n",
    "    Overfitting model will training score is 1 and test score is 0.31. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2285678169210082\n"
     ]
    }
   ],
   "source": [
    "kfolds = KFold(n_splits=10)\n",
    "score_dt = cross_val_score(dt_reg, X, Y, cv=kfolds)\n",
    "print(score_dt.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature: 0, Score: 0.06693\n",
      "Feature: 1, Score: 0.05908\n",
      "Feature: 2, Score: 0.03892\n",
      "Feature: 3, Score: 0.05951\n",
      "Feature: 4, Score: 0.06273\n",
      "Feature: 5, Score: 0.05871\n",
      "Feature: 6, Score: 0.03984\n",
      "Feature: 7, Score: 0.17145\n",
      "Feature: 8, Score: 0.02210\n",
      "Feature: 9, Score: 0.01338\n",
      "Feature: 10, Score: 0.03262\n",
      "Feature: 11, Score: 0.37475\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXoAAAD4CAYAAADiry33AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAQyUlEQVR4nO3df6xfd13H8efLWxuljqDsMrDtbIWG2ZhNlpsxHRlO3NIyY0fQ0AU3AixNk1XASKT6B/7BP1tCjJIMmmZWITIWgmtsXNlGpslixkjvYNnWseJNqfTaYe8Gggiha3j7xz2NX+6+3T139357dz99PpKb7zmfH+f7/qTN65577vecm6pCktSun1nuAiRJo2XQS1LjDHpJapxBL0mNM+glqXGrlruAYS688MLasGHDcpchSSvGo48++mxVjQ/re1kG/YYNG5icnFzuMiRpxUjyH2fr89KNJDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ17mV5Z6wkrQQbdt+7pMc7dtv1S3q8Mzyjl6TGGfSS1DiDXpIaZ9BLUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxvUK+iRbkhxJMpVk95D+bUkeT/JYkskkbxnoO5bkiTN9S1m8JGl+8z4CIckYcAdwLTANHEpyoKqeGhj2IHCgqirJpcDngUsG+q+pqmeXsG5JUk99zuivAKaq6mhVnQLuBrYNDqiqH1RVdbtrgEKS9LLQJ+jXAscH9qe7tp+S5B1JngbuBd430FXAA0keTbLjbG+SZEd32WdyZmamX/WSpHn1CfoMaXvBGXtV7a+qS4AbgI8NdF1VVZcDW4Fbk1w97E2qam9VTVTVxPj4eI+yJEl99An6aWD9wP464MTZBlfVQ8Drk1zY7Z/oXk8C+5m9FCRJOkf6BP0hYFOSjUlWA9uBA4MDkrwhSbrty4HVwHNJ1iS5oGtfA1wHPLmUC5Akvbh5P3VTVaeT7ALuB8aAfVV1OMnOrn8P8E7g5iTPAz8C3tV9AuciYH/3PWAVcFdV3TeitUiShuj1F6aq6iBwcE7bnoHt24Hbh8w7Cly2yBolSYvgnbGS1DiDXpIaZ9BLUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS43oFfZItSY4kmUqye0j/tiSPJ3ksyWSSt/SdK0karXmDPskYcAewFdgM3Jhk85xhDwKXVdVvAO8D7lzAXEnSCPU5o78CmKqqo1V1Crgb2DY4oKp+UFXV7a4Bqu9cSdJo9Qn6tcDxgf3pru2nJHlHkqeBe5k9q+89t5u/o7vsMzkzM9OndklSD32CPkPa6gUNVfur6hLgBuBjC5nbzd9bVRNVNTE+Pt6jLElSH32CfhpYP7C/DjhxtsFV9RDw+iQXLnSuJGnp9Qn6Q8CmJBuTrAa2AwcGByR5Q5J025cDq4Hn+syVJI3WqvkGVNXpJLuA+4ExYF9VHU6ys+vfA7wTuDnJ88CPgHd1v5wdOndEa5EkDTFv0ANU1UHg4Jy2PQPbtwO3950rSTp3vDNWkhpn0EtS4wx6SWqcQS9JjTPoJalxBr0kNc6gl6TGGfSS1DiDXpIaZ9BLUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjegV9ki1JjiSZSrJ7SP+7kzzefT2c5LKBvmNJnkjyWJLJpSxekjS/ef9mbJIx4A7gWmAaOJTkQFU9NTDsm8Bbq+q7SbYCe4E3D/RfU1XPLmHdkqSe+pzRXwFMVdXRqjoF3A1sGxxQVQ9X1Xe73UeAdUtbpiTppeoT9GuB4wP7013b2bwf+OLAfgEPJHk0yY6FlyhJWox5L90AGdJWQwcm1zAb9G8ZaL6qqk4keQ3wpSRPV9VDQ+buAHYAXHzxxT3KkiT10eeMfhpYP7C/Djgxd1CSS4E7gW1V9dyZ9qo60b2eBPYzeynoBapqb1VNVNXE+Ph4/xVIkl5Un6A/BGxKsjHJamA7cGBwQJKLgXuAm6rqGwPta5JccGYbuA54cqmKlyTNb95LN1V1Osku4H5gDNhXVYeT7Oz69wAfBV4NfDIJwOmqmgAuAvZ3bauAu6rqvpGsRJI0VJ9r9FTVQeDgnLY9A9u3ALcMmXcUuGxuuyTp3PHOWElqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxvYI+yZYkR5JMJdk9pP/dSR7vvh5OclnfuZKk0Zo36JOMAXcAW4HNwI1JNs8Z9k3grVV1KfAxYO8C5kqSRqjPGf0VwFRVHa2qU8DdwLbBAVX1cFV9t9t9BFjXd64kabT6BP1a4PjA/nTXdjbvB7640LlJdiSZTDI5MzPToyxJUh99gj5D2mrowOQaZoP+IwudW1V7q2qiqibGx8d7lCVJ6mNVjzHTwPqB/XXAibmDklwK3AlsrarnFjJXkjQ6fc7oDwGbkmxMshrYDhwYHJDkYuAe4Kaq+sZC5kqSRmveM/qqOp1kF3A/MAbsq6rDSXZ2/XuAjwKvBj6ZBOB0dxlm6NwRrUWSNESfSzdU1UHg4Jy2PQPbtwC39J0rSTp3vDNWkhpn0EtS4wx6SWqcQS9JjTPoJalxBr0kNc6gl6TGGfSS1DiDXpIaZ9BLUuN6PQJB0vLYsPveJT/msduuX/Jj6uXNM3pJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS43oFfZItSY4kmUqye0j/JUm+nOTHST48p+9YkieSPJZkcqkKlyT1M++dsUnGgDuAa4Fp4FCSA1X11MCw7wAfAG44y2GuqapnF1usJGnh+pzRXwFMVdXRqjoF3A1sGxxQVSer6hDw/AhqlCQtQp+gXwscH9if7tr6KuCBJI8m2XG2QUl2JJlMMjkzM7OAw0uSXkyfoM+QtlrAe1xVVZcDW4Fbk1w9bFBV7a2qiaqaGB8fX8DhJUkvpk/QTwPrB/bXASf6vkFVneheTwL7mb0UJEk6R/oE/SFgU5KNSVYD24EDfQ6eZE2SC85sA9cBT77UYiVJCzfvp26q6nSSXcD9wBiwr6oOJ9nZ9e9J8lpgEngl8JMkHwI2AxcC+5Ocea+7quq+0SxFkjRMrz88UlUHgYNz2vYMbH+b2Us6c30fuGwxBUqSFsc7YyWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxBr0kNa5X0CfZkuRIkqkku4f0X5Lky0l+nOTDC5krSRqteYM+yRhwB7CV2T/4fWOSzXOGfQf4APDxlzBXkjRCfc7orwCmqupoVZ0C7ga2DQ6oqpNVdQh4fqFzJUmj1Sfo1wLHB/anu7Y+FjNXkrQE+gR9hrRVz+P3nptkR5LJJJMzMzM9Dy9Jmk+foJ8G1g/srwNO9Dx+77lVtbeqJqpqYnx8vOfhJUnz6RP0h4BNSTYmWQ1sBw70PP5i5kqSlsCq+QZU1ekku4D7gTFgX1UdTrKz69+T5LXAJPBK4CdJPgRsrqrvD5s7qsVIkl5o3qAHqKqDwME5bXsGtr/N7GWZXnMlSeeOd8ZKUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1rtfTK1eSDbvvXdLjHbvt+iU9niSda57RS1Ljmjuj18vXUv+0Bf7EJfXhGb0kNc4z+peopd8FtHam3dK/jbQUPKOXpMb1CvokW5IcSTKVZPeQ/iT5RNf/eJLLB/qOJXkiyWNJJpeyeEnS/Oa9dJNkDLgDuBaYBg4lOVBVTw0M2wps6r7eDHyqez3jmqp6dsmqliT11ueM/gpgqqqOVtUp4G5g25wx24DP1KxHgFcled0S1ypJegn6BP1a4PjA/nTX1ndMAQ8keTTJjrO9SZIdSSaTTM7MzPQoS5LUR5+gz5C2WsCYq6rqcmYv79ya5Ophb1JVe6tqoqomxsfHe5QlSeqjT9BPA+sH9tcBJ/qOqaozryeB/cxeCpIknSN9gv4QsCnJxiSrge3AgTljDgA3d5++uRL4XlU9k2RNkgsAkqwBrgOeXML6JUnzmPdTN1V1Osku4H5gDNhXVYeT7Oz69wAHgbcDU8APgfd20y8C9ic58153VdV9S74KSdJZ9boztqoOMhvmg217BrYLuHXIvKPAZYusUZK0CD4C4WWstUcTtMZHLWil8BEIktQ4g16SGmfQS1LjvEYvqTn+/uSneUYvSY0z6CWpcQa9JDXOoJekxhn0ktQ4P3UjybuwG+cZvSQ1zqCXpMYZ9JLUOK/RSzpn/F3A8vCMXpIaZ9BLUuMMeklqnEEvSY3rFfRJtiQ5kmQqye4h/Unyia7/8SSX950rSRqteYM+yRhwB7AV2AzcmGTznGFbgU3d1w7gUwuYK0kaoT5n9FcAU1V1tKpOAXcD2+aM2QZ8pmY9Arwqyet6zpUkjVCq6sUHJH8AbKmqW7r9m4A3V9WugTH/DNxWVf/W7T8IfATYMN/cgWPsYPanAYA3AkcWt7R5XQg8O+L3OJdaWk9La4G21tPSWqCt9fxKVY0P6+hzw1SGtM397nC2MX3mzjZW7QX29qhnSSSZrKqJc/V+o9bSelpaC7S1npbWAu2t52z6BP00sH5gfx1woueY1T3mSpJGqM81+kPApiQbk6wGtgMH5ow5ANzcffrmSuB7VfVMz7mSpBGa94y+qk4n2QXcD4wB+6rqcJKdXf8e4CDwdmAK+CHw3hebO5KVLNw5u0x0jrS0npbWAm2tp6W1QHvrGWreX8ZKklY274yVpMYZ9JLUuPMy6Ft5LEOS9Un+NcnXkxxO8sHlrmkpJBlL8rXu/owVK8mrknwhydPdv9FvLndNi5HkT7r/Z08m+VySn1vumhYiyb4kJ5M8OdD2S0m+lOTfu9dfXM4aR+W8C/rGHstwGvjTqvo14Erg1hW8lkEfBL6+3EUsgb8B7quqS4DLWMFrSrIW+AAwUVW/zuyHK7Yvb1UL9vfAljltu4EHq2oT8GC335zzLuhp6LEMVfVMVX212/4fZoNk7fJWtThJ1gHXA3cudy2LkeSVwNXA3wJU1amq+u/lrWrRVgE/n2QV8ApW2D0xVfUQ8J05zduAT3fbnwZuOKdFnSPnY9CvBY4P7E+zwsMRIMkG4E3AV5a3kkX7a+DPgJ8sdyGL9KvADPB33WWoO5OsWe6iXqqq+k/g48C3gGeYvVfmgeWtaklc1N3zQ/f6mmWuZyTOx6Dv/ViGlSLJLwD/CHyoqr6/3PW8VEl+DzhZVY8udy1LYBVwOfCpqnoT8L+s4MsC3bXrbcBG4JeBNUn+aHmrUl/nY9D3eaTDipHkZ5kN+c9W1T3LXc8iXQX8fpJjzF5S+50k/7C8Jb1k08B0VZ35CesLzAb/SvW7wDeraqaqngfuAX5rmWtaCv/VPWmX7vXkMtczEudj0DfzWIYkYfYa8Ner6q+Wu57Fqqo/r6p1VbWB2X+Xf6mqFXnWWFXfBo4neWPX9DbgqWUsabG+BVyZ5BXd/7u3sYJ/uTzgAPCebvs9wD8tYy0j0+ehZk15mT+WYaGuAm4CnkjyWNf2F1V1cBlr0v/7Y+Cz3QnFUbpHg6xEVfWVJF8Avsrsp72+xgp7fECSzwG/DVyYZBr4S+A24PNJ3s/sN7M/XL4KR8dHIEhS487HSzeSdF4x6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1Lj/g+C2DCtRFk95gAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# get importance\n",
    "importance_dt = dt_reg.feature_importances_\n",
    "# summarize feature importance\n",
    "for i,v in enumerate(importance_dt):\n",
    "\tprint('Feature: %0d, Score: %.5f' % (i,v))\n",
    "# plot feature importance\n",
    "plt.bar([x for x in range(len(importance_dt))], importance_dt)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "feat_importances_dt = pd.Series(importance_dt, index=X.columns)\n",
    "feat_importances_dt.nlargest(12).plot(kind='barh')\n",
    "plt.title(\"Top important features\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Amount_Requested                 0.066928\n",
       "Amount_Funded_By_Investors       0.059077\n",
       "Debt_To_Income_Ratio             0.038918\n",
       "Monthly_Income                   0.059506\n",
       "Open_Credit_Lines                0.062730\n",
       "Revolving_Credit_Balance         0.058706\n",
       "Inquiries_in_the_last_6months    0.039837\n",
       "Loan_Length                      0.171449\n",
       "Loan_Purpose                     0.022097\n",
       "Home_Ownership                   0.013385\n",
       "Employment_Length                0.032616\n",
       "FICO_Score_Scaled                0.374751\n",
       "dtype: float64"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feat_importances_dt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model #2: Random Forest Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor()"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "rf_reg_model = RandomForestRegressor()\n",
    "rf_reg_model.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "rfreg_train_pred = rf_reg_model.predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-train - Random Forest Regressor:  0.9430551005748944\n",
      "MSE Score-train - Random Forest Regressor:  9.78169657142855e-05\n",
      "MAE Score-train - Random Forest Regressor:  0.007585199999999986\n"
     ]
    }
   ],
   "source": [
    "error_rfreg_r2_train = r2_score(Y_train, rfreg_train_pred)\n",
    "print(\"R2 Score-train - Random Forest Regressor: \", error_rfreg_r2_train)\n",
    "\n",
    "error_rfreg_mse_train = mean_squared_error(Y_train, rfreg_train_pred)\n",
    "print(\"MSE Score-train - Random Forest Regressor: \", error_rfreg_mse_train)\n",
    "\n",
    "error_rfreg_mae_train = mean_absolute_error(Y_train, rfreg_train_pred)\n",
    "print(\"MAE Score-train - Random Forest Regressor: \", error_rfreg_mae_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "rfreg_test_pred = rf_reg_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-Test - Random Forest Regressor:  0.5911008185248721\n",
      "MSE Score-test- Random Forest Regressor:  0.0006849381866666671\n",
      "MAE Score-test - Random Forest Regressor:  0.02016373333333334\n"
     ]
    }
   ],
   "source": [
    "error_rfreg_r2_test = r2_score(Y_test, rfreg_test_pred)\n",
    "print(\"R2 Score-Test - Random Forest Regressor: \", error_rfreg_r2_test)\n",
    "\n",
    "error_rfreg_mse_test = mean_squared_error(Y_test, rfreg_test_pred)\n",
    "print(\"MSE Score-test- Random Forest Regressor: \", error_rfreg_mse_test)\n",
    "\n",
    "error_rfreg_mae_test = mean_absolute_error(Y_test, rfreg_test_pred)\n",
    "print(\"MAE Score-test - Random Forest Regressor: \", error_rfreg_mae_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Predicted_rfreg_tst']=rfreg_test_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5985738824757266\n"
     ]
    }
   ],
   "source": [
    "kfolds = KFold(n_splits=10)\n",
    "score_rf = cross_val_score(rf_reg_model, X, Y, cv=kfolds)\n",
    "print(score_rf.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature: 0, Score: 0.05026\n",
      "Feature: 1, Score: 0.08038\n",
      "Feature: 2, Score: 0.04649\n",
      "Feature: 3, Score: 0.06152\n",
      "Feature: 4, Score: 0.05430\n",
      "Feature: 5, Score: 0.06644\n",
      "Feature: 6, Score: 0.03226\n",
      "Feature: 7, Score: 0.18481\n",
      "Feature: 8, Score: 0.02291\n",
      "Feature: 9, Score: 0.01097\n",
      "Feature: 10, Score: 0.02846\n",
      "Feature: 11, Score: 0.36120\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rf_reg_model = RandomForestRegressor()\n",
    "\n",
    "rf_reg_model.fit(X, Y)\n",
    "##### get importance\n",
    "importance_rfreg = rf_reg_model.feature_importances_\n",
    "##### summarize feature importance\n",
    "for i,v in enumerate(importance_rfreg):\n",
    "    print('Feature: %0d, Score: %.5f' % (i,v))\n",
    "    \n",
    "    \n",
    "##### plot feature importance\n",
    "plt.bar([x for x in range(len(importance_rfreg))], importance_rfreg)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "feat_importances_rfreg = pd.Series(importance_rfreg, index=X.columns)\n",
    "feat_importances_rfreg.nlargest(12).plot(kind='barh')\n",
    "plt.title(\"Top important features\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Amount_Requested                 0.050257\n",
       "Amount_Funded_By_Investors       0.080385\n",
       "Debt_To_Income_Ratio             0.046487\n",
       "Monthly_Income                   0.061521\n",
       "Open_Credit_Lines                0.054305\n",
       "Revolving_Credit_Balance         0.066437\n",
       "Inquiries_in_the_last_6months    0.032263\n",
       "Loan_Length                      0.184809\n",
       "Loan_Purpose                     0.022907\n",
       "Home_Ownership                   0.010973\n",
       "Employment_Length                0.028459\n",
       "FICO_Score_Scaled                0.361198\n",
       "dtype: float64"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feat_importances_rfreg"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "feat_importances_rfr = pd.Series(importance_rfr, index=X.columns)\n",
    "feat_importances_rfr.nlargest(15).plot(kind='barh')\n",
    "plt.title(\"Top 15 important features\")\n",
    "plt.show()\n",
    "##### With Feature Scaling\n",
    "\n",
    "![image.png](attachment:image.png)\n",
    "\n",
    "    Inference (RANDOMFORESTREGRESSOR): Features with high coefficient are:\n",
    "    FICO_Score_Scaled\n",
    "    Loan_Length_60 months\n",
    "    Amount_Funded_By_Investors_log_10000\n",
    "    Revolving_Credit_Balance_log_1000\n",
    "    Loan_Length_36 months\n",
    "    Monthly_Income_log\n",
    "    Open_Credit_Lines_log_10\n",
    "    Amount_Requested_log_10000\n",
    "    Debt_To_Income_Ratio\n",
    "    Inquiries_in_the_last_6months\n",
    "    \n",
    "    #features with low coefficient value:\n",
    "    Loan_Purpose_debt_consolidation\n",
    "    Employment_Length_10+ years\n",
    "    Employment_Length_1 year\n",
    "    Home_Ownership_RENT\n",
    "    Home_Ownership_MORTGAGE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model #3: ADABOOST REGRESSOR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AdaBoostRegressor()"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import AdaBoostRegressor\n",
    "\n",
    "adabst_reg_model = AdaBoostRegressor()\n",
    "adabst_reg_model.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "adabst_train_pred = adabst_reg_model.predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-train - Adaboost Regressor:  0.5333594684376137\n",
      "MSE Score-train - Adaboost Regressor:  0.0008015706645819447\n",
      "MAE Score-train - Adaboost Regressor:  0.023385513968799686\n"
     ]
    }
   ],
   "source": [
    "error_adabst_r2_train = r2_score(Y_train, adabst_train_pred)\n",
    "print(\"R2 Score-train - Adaboost Regressor: \", error_adabst_r2_train)\n",
    "\n",
    "error_adabst_mse_train = mean_squared_error(Y_train, adabst_train_pred)\n",
    "print(\"MSE Score-train - Adaboost Regressor: \", error_adabst_mse_train)\n",
    "\n",
    "error_adabst_mae_train = mean_absolute_error(Y_train, adabst_train_pred)\n",
    "print(\"MAE Score-train - Adaboost Regressor: \", error_adabst_mae_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "adabst_test_pred = adabst_reg_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-test - Adaboost Regressor:  0.516120567922871\n",
      "MSE Score-test - Adaboost Regressor:  0.000810535984876666\n",
      "MAE Score-test - Adaboost Regressor:  0.023148284532367485\n"
     ]
    }
   ],
   "source": [
    "error_adabst_r2_test = r2_score(Y_test, adabst_test_pred)\n",
    "print(\"R2 Score-test - Adaboost Regressor: \", error_adabst_r2_test)\n",
    "\n",
    "error_adabst_mse_test = mean_squared_error(Y_test, adabst_test_pred)\n",
    "print(\"MSE Score-test - Adaboost Regressor: \", error_adabst_mse_test)\n",
    "\n",
    "error_adabst_mae_test = mean_absolute_error(Y_test, adabst_test_pred)\n",
    "print(\"MAE Score-test - Adaboost Regressor: \", error_adabst_mae_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Predicted_adabst_tst']=adabst_test_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5241308039323802\n"
     ]
    }
   ],
   "source": [
    "kfolds = KFold(n_splits=10)\n",
    "score_adabst = cross_val_score(adabst_reg_model, X, Y, cv=kfolds)\n",
    "print(score_adabst.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature: 0, Score: 0.03111\n",
      "Feature: 1, Score: 0.13856\n",
      "Feature: 2, Score: 0.03635\n",
      "Feature: 3, Score: 0.03769\n",
      "Feature: 4, Score: 0.08630\n",
      "Feature: 5, Score: 0.06675\n",
      "Feature: 6, Score: 0.05099\n",
      "Feature: 7, Score: 0.16011\n",
      "Feature: 8, Score: 0.06120\n",
      "Feature: 9, Score: 0.00348\n",
      "Feature: 10, Score: 0.02125\n",
      "Feature: 11, Score: 0.30622\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "##### get importance\n",
    "importance_adab = adabst_reg_model.feature_importances_\n",
    "##### summarize feature importance\n",
    "for i,v in enumerate(importance_adab):\n",
    "    print('Feature: %0d, Score: %.5f' % (i,v))\n",
    "    \n",
    "    \n",
    "##### plot feature importance\n",
    "plt.bar([x for x in range(len(importance_adab))], importance_adab)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "feat_importances_adab = pd.Series(importance_adab, index=X.columns)\n",
    "feat_importances_adab.nlargest(12).plot(kind='barh')\n",
    "plt.title(\"Top important features\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Amount_Requested                 0.031109\n",
       "Amount_Funded_By_Investors       0.138557\n",
       "Debt_To_Income_Ratio             0.036349\n",
       "Monthly_Income                   0.037688\n",
       "Open_Credit_Lines                0.086299\n",
       "Revolving_Credit_Balance         0.066751\n",
       "Inquiries_in_the_last_6months    0.050994\n",
       "Loan_Length                      0.160107\n",
       "Loan_Purpose                     0.061197\n",
       "Home_Ownership                   0.003478\n",
       "Employment_Length                0.021252\n",
       "FICO_Score_Scaled                0.306219\n",
       "dtype: float64"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feat_importances_adab"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model #4: GradientBoostingRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "gbr_model = GradientBoostingRegressor()\n",
    "\n",
    "gbr_model.fit(X_train, Y_train)\n",
    "gbr_train_pred = gbr_model.predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-train - Gradient Boosting Regressor:  0.7176362251232182\n",
      "MSE Score-train- Gradient Boost Regressor:  0.00048502970353656353\n",
      "MAE Score-train- Gradient Boost Regressor:  0.017140529701147773\n"
     ]
    }
   ],
   "source": [
    "error_gbr_r2_train = r2_score(Y_train, gbr_train_pred)\n",
    "print(\"R2 Score-train - Gradient Boosting Regressor: \", error_gbr_r2_train)\n",
    "\n",
    "error_gbr_mse_train = mean_squared_error(Y_train, gbr_train_pred)\n",
    "print('MSE Score-train- Gradient Boost Regressor: ', error_gbr_mse_train)\n",
    "\n",
    "error_gbr_mae_train = mean_absolute_error(Y_train, gbr_train_pred)\n",
    "print('MAE Score-train- Gradient Boost Regressor: ', error_gbr_mae_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "gbr_test_pred = gbr_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-test - Gradient Boosting Regressor:  0.6323377192651223\n",
      "MSE Score-test - Gradient Boosting Regressor:  0.0006158631449537299\n",
      "MAE Score-test - Gradient Boosting Regressor:  0.01959573660879443\n"
     ]
    }
   ],
   "source": [
    "error_gbr_r2_test = r2_score(Y_test, gbr_test_pred)\n",
    "print(\"R2 Score-test - Gradient Boosting Regressor: \", error_gbr_r2_test)\n",
    "\n",
    "error_gbr_mse_test = mean_squared_error(Y_test, gbr_test_pred)\n",
    "print(\"MSE Score-test - Gradient Boosting Regressor: \", error_gbr_mse_test)\n",
    "\n",
    "error_gbr_mae_test = mean_absolute_error(Y_test, gbr_test_pred)\n",
    "print(\"MAE Score-test - Gradient Boosting Regressor: \", error_gbr_mae_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Predicted_gbr_tst']=gbr_test_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6290512654375624\n"
     ]
    }
   ],
   "source": [
    "kfolds = KFold(n_splits=10)\n",
    "score_gbr = cross_val_score(gbr_model, X, Y, cv=kfolds)\n",
    "print(score_gbr.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature: 0, Score: 0.03654\n",
      "Feature: 1, Score: 0.08171\n",
      "Feature: 2, Score: 0.01355\n",
      "Feature: 3, Score: 0.01480\n",
      "Feature: 4, Score: 0.03090\n",
      "Feature: 5, Score: 0.01623\n",
      "Feature: 6, Score: 0.03759\n",
      "Feature: 7, Score: 0.23650\n",
      "Feature: 8, Score: 0.00530\n",
      "Feature: 9, Score: 0.00429\n",
      "Feature: 10, Score: 0.00197\n",
      "Feature: 11, Score: 0.52061\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gbr_reg_model = GradientBoostingRegressor()\n",
    "\n",
    "gbr_reg_model.fit(X, Y)\n",
    "##### get importance\n",
    "importance_gbr = gbr_reg_model.feature_importances_\n",
    "##### summarize feature importance\n",
    "for i,v in enumerate(importance_gbr):\n",
    "    print('Feature: %0d, Score: %.5f' % (i,v))\n",
    "    \n",
    "    \n",
    "##### plot feature importance\n",
    "plt.bar([x for x in range(len(importance_gbr))], importance_gbr)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "feat_importances_gbr = pd.Series(importance_gbr, index=X.columns)\n",
    "feat_importances_gbr.nlargest(12).plot(kind='barh')\n",
    "plt.title(\"Top important features\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Amount_Requested                 0.036537\n",
       "Amount_Funded_By_Investors       0.081709\n",
       "Debt_To_Income_Ratio             0.013553\n",
       "Monthly_Income                   0.014801\n",
       "Open_Credit_Lines                0.030904\n",
       "Revolving_Credit_Balance         0.016234\n",
       "Inquiries_in_the_last_6months    0.037594\n",
       "Loan_Length                      0.236498\n",
       "Loan_Purpose                     0.005301\n",
       "Home_Ownership                   0.004290\n",
       "Employment_Length                0.001970\n",
       "FICO_Score_Scaled                0.520609\n",
       "dtype: float64"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feat_importances_gbr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    Inference (GBR) - With Scaled Features: high coefficient values\n",
    "    \n",
    "    FICO_Score_Scaled\n",
    "    Loan_Length_60 months\n",
    "    Amount_Funded_By_Investors_log_10000\n",
    "    Inquiries_in_the_last_6months\n",
    "    Amount_Requested_log_10000\n",
    "    Open_Credit_Lines_log_10\n",
    "    Loan_Length_36 months\n",
    "    Revolving_Credit_Balance_log_1000\n",
    "    Monthly_Income_log\n",
    "    Debt_To_Income_Ratio"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model #5: XGBoost Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "import xgboost\n",
    "\n",
    "xgbr_model = xgboost.XGBRegressor()\n",
    "xgbr_model.fit(X_train, Y_train)\n",
    "\n",
    "xgbr_train_pred = xgbr_model.predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-train - XGBoost Regressor:  0.9854425789604642\n",
      "MSE Score-train - XGBoost Regressor:  2.5005975409360485e-05\n",
      "MAE Score-train - XGBoost Regressor:  0.003499566050938198\n"
     ]
    }
   ],
   "source": [
    "error_xgbr_r2_train = r2_score(Y_train, xgbr_train_pred)\n",
    "print('R2 Score-train - XGBoost Regressor: ', error_xgbr_r2_train)\n",
    "\n",
    "error_xgbr_mse_train = mean_squared_error(Y_train, xgbr_train_pred)\n",
    "print('MSE Score-train - XGBoost Regressor: ', error_xgbr_mse_train)\n",
    "\n",
    "error_xgbr_mae_train = mean_absolute_error(Y_train, xgbr_train_pred)\n",
    "print('MAE Score-train - XGBoost Regressor: ', error_xgbr_mae_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "xgbr_test_pred = xgbr_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-test - XGBoost Regressor:  0.5452721403109422\n",
      "MSE Score-test - XGBoost Regressor:  0.0007617048156433716\n",
      "MAE Score-test - XGBoost Regressor:  0.0217687823677063\n"
     ]
    }
   ],
   "source": [
    "error_xgbr_r2_test = r2_score(Y_test, xgbr_test_pred)\n",
    "print('R2 Score-test - XGBoost Regressor: ', error_xgbr_r2_test)\n",
    "\n",
    "error_xgbr_mse_test = mean_squared_error(Y_test, xgbr_test_pred)\n",
    "print('MSE Score-test - XGBoost Regressor: ', error_xgbr_mse_test)\n",
    "\n",
    "error_xgbr_mae_test = mean_absolute_error(Y_test, xgbr_test_pred)\n",
    "print('MAE Score-test - XGBoost Regressor: ', error_xgbr_mae_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Predicted_xgbr_tst']=xgbr_test_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5646543605543897\n"
     ]
    }
   ],
   "source": [
    "kfolds = KFold(n_splits=10)\n",
    "score_xgbr = cross_val_score(xgbr_model, X, Y, cv=kfolds)\n",
    "print(score_xgbr.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature: 0, Score: 0.01206\n",
      "Feature: 1, Score: 0.02631\n",
      "Feature: 2, Score: 0.01106\n",
      "Feature: 3, Score: 0.01488\n",
      "Feature: 4, Score: 0.01761\n",
      "Feature: 5, Score: 0.01580\n",
      "Feature: 6, Score: 0.02728\n",
      "Feature: 7, Score: 0.34269\n",
      "Feature: 8, Score: 0.01246\n",
      "Feature: 9, Score: 0.01463\n",
      "Feature: 10, Score: 0.01386\n",
      "Feature: 11, Score: 0.49136\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# get importance\n",
    "importance_xgbr = xgbr_model.feature_importances_\n",
    "# summarize feature importance\n",
    "for i,v in enumerate(importance_xgbr):\n",
    "\tprint('Feature: %0d, Score: %.5f' % (i,v))\n",
    "# plot feature importance\n",
    "plt.bar([x for x in range(len(importance_xgbr))], importance_xgbr)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "feat_importances_xgbr = pd.Series(importance_xgbr, index=X_train.columns)\n",
    "feat_importances_xgbr.nlargest(12).plot(kind='barh')\n",
    "plt.title(\"Top important features\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Amount_Requested                 0.012060\n",
       "Amount_Funded_By_Investors       0.026308\n",
       "Debt_To_Income_Ratio             0.011057\n",
       "Monthly_Income                   0.014881\n",
       "Open_Credit_Lines                0.017612\n",
       "Revolving_Credit_Balance         0.015801\n",
       "Inquiries_in_the_last_6months    0.027282\n",
       "Loan_Length                      0.342688\n",
       "Loan_Purpose                     0.012460\n",
       "Home_Ownership                   0.014626\n",
       "Employment_Length                0.013864\n",
       "FICO_Score_Scaled                0.491362\n",
       "dtype: float32"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feat_importances_xgbr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model #6: SVM regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVR()"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVR\n",
    "\n",
    "svr_reg = SVR(kernel = 'rbf')\n",
    "svr_reg.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Regressor R2-score train:  -0.2292841916327415\n",
      "SVM Regressor MSE train:  0.002111600000000001\n",
      "SVM Regressor MAE train:  0.037834285714285716\n"
     ]
    }
   ],
   "source": [
    "svr_train_pred = svr_reg.predict(X_train)\n",
    "\n",
    "error_r2_score_svr_train = r2_score(Y_train, svr_train_pred)\n",
    "print('SVM Regressor R2-score train: ', error_r2_score_svr_train)\n",
    "error_mse_svr_train = mean_squared_error(Y_train, svr_train_pred)\n",
    "print('SVM Regressor MSE train: ', error_mse_svr_train)\n",
    "error_mae_svr_train = mean_absolute_error(Y_train, svr_train_pred)\n",
    "print('SVM Regressor MAE train: ', error_mae_svr_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Regressor R2-score test:  -0.21642067619043992\n",
      "SVM Regressor MSE test:  0.0020376000000000005\n",
      "SVM Regressor MAE test:  0.03701333333333335\n"
     ]
    }
   ],
   "source": [
    "svr_test_pred = svr_reg.predict(X_test)\n",
    "\n",
    "error_r2_score_svr_test = r2_score(Y_test, svr_test_pred)\n",
    "print('SVM Regressor R2-score test: ', error_r2_score_svr_test)\n",
    "error_mse_svr_test = mean_squared_error(Y_test, svr_test_pred)\n",
    "print('SVM Regressor MSE test: ', error_mse_svr_test)\n",
    "error_mae_svr_test = mean_absolute_error(Y_test, svr_test_pred)\n",
    "print('SVM Regressor MAE test: ', error_mae_svr_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Predicted_svr_tst']=svr_test_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model #7: KNN Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score for K:  1 is:  -0.07505415865908116\n",
      "MSE value for K:  1 is:  0.0018008\n",
      "MAE value for K:  1 is:  0.033253333333333336\n",
      "/n\n",
      "R2 Score for K:  2 is:  0.1204789777799854\n",
      "MSE value for K:  2 is:  0.0014732666666666667\n",
      "MAE value for K:  2 is:  0.03048\n",
      "/n\n",
      "R2 Score for K:  3 is:  0.18821267863796276\n",
      "MSE value for K:  3 is:  0.0013598074074074073\n",
      "MAE value for K:  3 is:  0.02950666666666667\n",
      "/n\n",
      "R2 Score for K:  4 is:  0.2434184971083544\n",
      "MSE value for K:  4 is:  0.0012673333333333334\n",
      "MAE value for K:  4 is:  0.028313333333333333\n",
      "/n\n",
      "R2 Score for K:  5 is:  0.2956986371503567\n",
      "MSE value for K:  5 is:  0.00117976\n",
      "MAE value for K:  5 is:  0.027661333333333336\n",
      "/n\n",
      "R2 Score for K:  6 is:  0.31549693656350886\n",
      "MSE value for K:  6 is:  0.0011465962962962963\n",
      "MAE value for K:  6 is:  0.0275\n",
      "/n\n",
      "R2 Score for K:  7 is:  0.31055394751899956\n",
      "MSE value for K:  7 is:  0.0011548761904761904\n",
      "MAE value for K:  7 is:  0.02758666666666667\n",
      "/n\n",
      "R2 Score for K:  8 is:  0.31821847860971775\n",
      "MSE value for K:  8 is:  0.0011420375\n",
      "MAE value for K:  8 is:  0.02750666666666667\n",
      "/n\n",
      "R2 Score for K:  9 is:  0.3114032764422331\n",
      "MSE value for K:  9 is:  0.0011534534979423868\n",
      "MAE value for K:  9 is:  0.027684444444444442\n",
      "/n\n",
      "R2 Score for K:  10 is:  0.31036700530952266\n",
      "MSE value for K:  10 is:  0.0011551893333333334\n",
      "MAE value for K:  10 is:  0.027685333333333333\n",
      "/n\n",
      "R2 Score for K:  11 is:  0.30462035269677823\n",
      "MSE value for K:  11 is:  0.001164815426997245\n",
      "MAE value for K:  11 is:  0.02781818181818182\n",
      "/n\n",
      "R2 Score for K:  12 is:  0.30575167683472604\n",
      "MSE value for K:  12 is:  0.0011629203703703702\n",
      "MAE value for K:  12 is:  0.027811111111111113\n",
      "/n\n",
      "R2 Score for K:  13 is:  0.3055889805466515\n",
      "MSE value for K:  13 is:  0.001163192899408284\n",
      "MAE value for K:  13 is:  0.02782871794871795\n",
      "/n\n",
      "R2 Score for K:  14 is:  0.30515669785801025\n",
      "MSE value for K:  14 is:  0.001163917006802721\n",
      "MAE value for K:  14 is:  0.02770095238095238\n",
      "/n\n",
      "R2 Score for K:  15 is:  0.3014668580421206\n",
      "MSE value for K:  15 is:  0.0011700977777777777\n",
      "MAE value for K:  15 is:  0.027795555555555556\n",
      "/n\n",
      "R2 Score for K:  16 is:  0.30564412935338847\n",
      "MSE value for K:  16 is:  0.0011631005208333333\n",
      "MAE value for K:  16 is:  0.027782500000000005\n",
      "/n\n",
      "R2 Score for K:  17 is:  0.30157150175807845\n",
      "MSE value for K:  17 is:  0.001169922491349481\n",
      "MAE value for K:  17 is:  0.027850196078431377\n",
      "/n\n",
      "R2 Score for K:  18 is:  0.2971227581964476\n",
      "MSE value for K:  18 is:  0.0011773744855967077\n",
      "MAE value for K:  18 is:  0.02797037037037037\n",
      "/n\n",
      "R2 Score for K:  19 is:  0.2904275562957469\n",
      "MSE value for K:  19 is:  0.0011885894736842107\n",
      "MAE value for K:  19 is:  0.028143157894736846\n",
      "/n\n",
      "R2 Score for K:  20 is:  0.28630604195401654\n",
      "MSE value for K:  20 is:  0.0011954933333333333\n",
      "MAE value for K:  20 is:  0.02818266666666667\n",
      "/n\n",
      "R2 Score for K:  21 is:  0.28787927186774\n",
      "MSE value for K:  21 is:  0.0011928580498866213\n",
      "MAE value for K:  21 is:  0.028138412698412697\n",
      "/n\n",
      "R2 Score for K:  22 is:  0.2841784000823592\n",
      "MSE value for K:  22 is:  0.0011990573002754821\n",
      "MAE value for K:  22 is:  0.028189090909090907\n",
      "/n\n",
      "R2 Score for K:  23 is:  0.2832702935543304\n",
      "MSE value for K:  23 is:  0.0012005784499054821\n",
      "MAE value for K:  23 is:  0.028191884057971014\n",
      "/n\n",
      "R2 Score for K:  24 is:  0.2813513540177739\n",
      "MSE value for K:  24 is:  0.001203792824074074\n",
      "MAE value for K:  24 is:  0.028189444444444444\n",
      "/n\n",
      "R2 Score for K:  25 is:  0.27589764554701857\n",
      "MSE value for K:  25 is:  0.0012129282133333333\n",
      "MAE value for K:  25 is:  0.028332266666666668\n",
      "/n\n",
      "R2 Score for K:  26 is:  0.27366336484399745\n",
      "MSE value for K:  26 is:  0.0012166708086785007\n",
      "MAE value for K:  26 is:  0.028406666666666667\n",
      "/n\n",
      "R2 Score for K:  27 is:  0.2684134440052579\n",
      "MSE value for K:  27 is:  0.0012254648376771834\n",
      "MAE value for K:  27 is:  0.028492345679012345\n",
      "/n\n",
      "R2 Score for K:  28 is:  0.2648997741215686\n",
      "MSE value for K:  28 is:  0.0012313505102040817\n",
      "MAE value for K:  28 is:  0.02849857142857143\n",
      "/n\n",
      "R2 Score for K:  29 is:  0.260650432903329\n",
      "MSE value for K:  29 is:  0.0012384684898929846\n",
      "MAE value for K:  29 is:  0.028596781609195404\n",
      "/n\n",
      "R2 Score for K:  30 is:  0.26105490766106065\n",
      "MSE value for K:  30 is:  0.001237790962962963\n",
      "MAE value for K:  30 is:  0.02858977777777778\n",
      "/n\n",
      "R2 Score for K:  31 is:  0.26224104319014363\n",
      "MSE value for K:  31 is:  0.0012358040929587237\n",
      "MAE value for K:  31 is:  0.028566881720430103\n",
      "/n\n",
      "R2 Score for K:  32 is:  0.26248010491130846\n",
      "MSE value for K:  32 is:  0.0012354036458333334\n",
      "MAE value for K:  32 is:  0.028546666666666668\n",
      "/n\n",
      "R2 Score for K:  33 is:  0.2607672640928508\n",
      "MSE value for K:  33 is:  0.0012382727884909703\n",
      "MAE value for K:  33 is:  0.028577373737373738\n",
      "/n\n",
      "R2 Score for K:  34 is:  0.2579959276933025\n",
      "MSE value for K:  34 is:  0.0012429149942329873\n",
      "MAE value for K:  34 is:  0.02857607843137255\n",
      "/n\n",
      "R2 Score for K:  35 is:  0.25836828574344806\n",
      "MSE value for K:  35 is:  0.0012422912653061225\n",
      "MAE value for K:  35 is:  0.02859847619047619\n",
      "/n\n",
      "R2 Score for K:  36 is:  0.26236386672440826\n",
      "MSE value for K:  36 is:  0.0012355983539094652\n",
      "MAE value for K:  36 is:  0.028534074074074076\n",
      "/n\n",
      "R2 Score for K:  37 is:  0.26169202590387886\n",
      "MSE value for K:  37 is:  0.0012367237399561724\n",
      "MAE value for K:  37 is:  0.02851927927927928\n",
      "/n\n",
      "R2 Score for K:  38 is:  0.2614191705352483\n",
      "MSE value for K:  38 is:  0.0012371807940904894\n",
      "MAE value for K:  38 is:  0.028542456140350878\n",
      "/n\n",
      "R2 Score for K:  39 is:  0.25840788124744973\n",
      "MSE value for K:  39 is:  0.001242224939732632\n",
      "MAE value for K:  39 is:  0.028567179487179486\n",
      "/n\n",
      "R2 Score for K:  40 is:  0.2553165969226676\n",
      "MSE value for K:  40 is:  0.0012474030833333333\n",
      "MAE value for K:  40 is:  0.028606333333333338\n",
      "/n\n",
      "R2 Score for K:  41 is:  0.2556002041240054\n",
      "MSE value for K:  41 is:  0.0012469280190362877\n",
      "MAE value for K:  41 is:  0.02860260162601626\n",
      "/n\n",
      "R2 Score for K:  42 is:  0.25243051874361455\n",
      "MSE value for K:  42 is:  0.0012522374905517763\n",
      "MAE value for K:  42 is:  0.028666666666666667\n",
      "/n\n",
      "R2 Score for K:  43 is:  0.2525750957198878\n",
      "MSE value for K:  43 is:  0.0012519953127816837\n",
      "MAE value for K:  43 is:  0.028654573643410855\n",
      "/n\n",
      "R2 Score for K:  44 is:  0.25209511907337256\n",
      "MSE value for K:  44 is:  0.0012527993112947658\n",
      "MAE value for K:  44 is:  0.028682424242424242\n",
      "/n\n",
      "R2 Score for K:  45 is:  0.25096307610649116\n",
      "MSE value for K:  45 is:  0.0012546955720164608\n",
      "MAE value for K:  45 is:  0.028687703703703705\n",
      "/n\n",
      "R2 Score for K:  46 is:  0.24947082411778054\n",
      "MSE value for K:  46 is:  0.001257195211090107\n",
      "MAE value for K:  46 is:  0.028734492753623192\n",
      "/n\n",
      "R2 Score for K:  47 is:  0.24893560451377472\n",
      "MSE value for K:  47 is:  0.0012580917458880337\n",
      "MAE value for K:  47 is:  0.028766241134751777\n",
      "/n\n",
      "R2 Score for K:  48 is:  0.24686568235983608\n",
      "MSE value for K:  48 is:  0.001261559027777778\n",
      "MAE value for K:  48 is:  0.028811666666666666\n",
      "/n\n",
      "R2 Score for K:  49 is:  0.2448410550110467\n",
      "MSE value for K:  49 is:  0.0012649504373177841\n",
      "MAE value for K:  49 is:  0.02883891156462585\n",
      "/n\n",
      "R2 Score for K:  50 is:  0.24387720598629903\n",
      "MSE value for K:  50 is:  0.00126656496\n",
      "MAE value for K:  50 is:  0.028821066666666666\n",
      "/n\n"
     ]
    }
   ],
   "source": [
    "from sklearn import neighbors\n",
    "\n",
    "rmse_val = []\n",
    "r2_val = []\n",
    "mae_val = []\n",
    "\n",
    "for k in range(50):\n",
    "    k = k+1\n",
    "    \n",
    "    knn_reg_model = neighbors.KNeighborsRegressor(n_neighbors = k)\n",
    "    \n",
    "    knn_reg_model.fit(X_train, Y_train)\n",
    "    knn_reg_train_pred = knn_reg_model.predict(X_train)\n",
    "    knn_reg_test_pred = knn_reg_model.predict(X_test)\n",
    "    error_mse_knn = mean_squared_error(Y_test, knn_reg_test_pred)\n",
    "    error_r2_knn = r2_score(Y_test, knn_reg_test_pred)\n",
    "    error_mae_knn = mean_absolute_error(Y_test, knn_reg_test_pred)\n",
    "    \n",
    "    rmse_val.append(error_mse_knn)\n",
    "    r2_val.append(error_r2_knn)\n",
    "    mae_val.append(error_mae_knn)\n",
    "    print('R2 Score for K: ', k, 'is: ', error_r2_knn)\n",
    "    print('MSE value for K: ', k, 'is: ', error_mse_knn)\n",
    "    print('MAE value for K: ', k, 'is: ', error_mae_knn)\n",
    "    print('/n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2ccc660fb20>"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "curve_rmse = pd.DataFrame(rmse_val)\n",
    "curve_rmse.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Predicted_knn_tst']=knn_reg_test_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature: 0, Score: 0.00011\n",
      "Feature: 1, Score: 0.00011\n",
      "Feature: 2, Score: -0.00000\n",
      "Feature: 3, Score: 0.00007\n",
      "Feature: 4, Score: 0.00008\n",
      "Feature: 5, Score: 0.00007\n",
      "Feature: 6, Score: 0.00020\n",
      "Feature: 7, Score: 0.00008\n",
      "Feature: 8, Score: 0.00020\n",
      "Feature: 9, Score: 0.00019\n",
      "Feature: 10, Score: 0.00022\n",
      "Feature: 11, Score: 0.00028\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.inspection import permutation_importance\n",
    "from matplotlib import pyplot\n",
    "# define dataset\n",
    "#X, y = make_regression(n_samples=1000, n_features=10, n_informative=5, random_state=1)\n",
    "# define the model\n",
    "model_knnreg = KNeighborsRegressor()\n",
    "# fit the model\n",
    "model_knnreg.fit(X_train, Y_train)\n",
    "# perform permutation importance\n",
    "results = permutation_importance(model_knnreg, X_train, Y_train, scoring='neg_mean_squared_error')\n",
    "# get importance\n",
    "importance_knnreg = results.importances_mean\n",
    "# summarize feature importance\n",
    "for i,v in enumerate(importance_knnreg):\n",
    "\tprint('Feature: %0d, Score: %.5f' % (i,v))\n",
    "# plot feature importance\n",
    "pyplot.bar([x for x in range(len(importance_knnreg))], importance_knnreg)\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "feat_importances_knnreg = pd.Series(importance_knnreg, index=X_train.columns)\n",
    "feat_importances_knnreg.nlargest(12).plot(kind='barh')\n",
    "plt.title(\"Top important features\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Amount_Requested                 1.072027e-04\n",
       "Amount_Funded_By_Investors       1.106295e-04\n",
       "Debt_To_Income_Ratio            -1.522286e-07\n",
       "Monthly_Income                   7.066560e-05\n",
       "Open_Credit_Lines                8.175726e-05\n",
       "Revolving_Credit_Balance         6.573806e-05\n",
       "Inquiries_in_the_last_6months    1.984416e-04\n",
       "Loan_Length                      8.331703e-05\n",
       "Loan_Purpose                     2.005746e-04\n",
       "Home_Ownership                   1.944745e-04\n",
       "Employment_Length                2.236571e-04\n",
       "FICO_Score_Scaled                2.801687e-04\n",
       "dtype: float64"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feat_importances_knnreg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model #8: Linear Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Backward Elimination"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Amount_Requested', 'Amount_Funded_By_Investors', 'Interest_Rate',\n",
       "       'Debt_To_Income_Ratio', 'Monthly_Income', 'Open_Credit_Lines',\n",
       "       'Revolving_Credit_Balance', 'Inquiries_in_the_last_6months',\n",
       "       'Loan_Length', 'Loan_Purpose', 'Home_Ownership', 'Employment_Length',\n",
       "       'FICO_Score_Scaled'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data = updated_loan_data.copy()\n",
    "final_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = final_data.drop('Interest_Rate', axis=1) \n",
    "y = final_data['Interest_Rate']  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Amount_Requested', 'Amount_Funded_By_Investors', 'Debt_To_Income_Ratio', 'Open_Credit_Lines', 'Inquiries_in_the_last_6months', 'Loan_Length', 'Loan_Purpose', 'Home_Ownership', 'FICO_Score_Scaled']\n"
     ]
    }
   ],
   "source": [
    "# Backward Elimination\n",
    "cols = list(x.columns) # all column present in x\n",
    "pmax = 1 # Setting pmax value to 1\n",
    "while (len(cols)>0):  # count of variable should be greater than zero\n",
    "    p= []  \n",
    "    X_1 = x[cols] # all column we assign in X_1\n",
    "    X_1 = sm.add_constant(X_1)  # adding a column with value 1 - adding constant column in X_1\n",
    "    final_model = sm.OLS(y, X_1).fit()  # Regression Model\n",
    "    p = pd.Series(final_model.pvalues.values[1:],index = cols) # selecting p-values only\n",
    "    # to get p-values for all variable only\n",
    "    pmax = max(p)  # select a max P-value\n",
    "    feature_with_p_max = p.idxmax()\n",
    "    #idmax is used to display the variable name which has max P-value\n",
    "    if (pmax>0.05):\n",
    "        cols.remove(feature_with_p_max)\n",
    "    else:\n",
    "        break\n",
    "selected_features_BE = cols\n",
    "print(selected_features_BE)\n",
    "\n",
    "# Following columns have p-values<0.05 :\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>Interest_Rate</td>  <th>  R-squared:         </th>  <td>   0.596</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th>  <td>   0.595</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th>  <td>   408.4</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sun, 14 Nov 2021</td> <th>  Prob (F-statistic):</th>   <td>  0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>14:21:44</td>     <th>  Log-Likelihood:    </th>  <td>  5553.8</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  2500</td>      <th>  AIC:               </th> <td>-1.109e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  2490</td>      <th>  BIC:               </th> <td>-1.103e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     9</td>      <th>                     </th>      <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>      <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                <td></td>                   <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                         <td>    0.1565</td> <td>    0.002</td> <td>   75.382</td> <td> 0.000</td> <td>    0.152</td> <td>    0.161</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Amount_Requested</th>              <td>    0.0037</td> <td>    0.002</td> <td>    2.273</td> <td> 0.023</td> <td>    0.001</td> <td>    0.007</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Amount_Funded_By_Investors</th>    <td>    0.0070</td> <td>    0.002</td> <td>    4.368</td> <td> 0.000</td> <td>    0.004</td> <td>    0.010</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Debt_To_Income_Ratio</th>          <td>    0.0271</td> <td>    0.008</td> <td>    3.492</td> <td> 0.000</td> <td>    0.012</td> <td>    0.042</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Open_Credit_Lines</th>             <td>   -0.0025</td> <td>    0.001</td> <td>   -4.253</td> <td> 0.000</td> <td>   -0.004</td> <td>   -0.001</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Inquiries_in_the_last_6months</th> <td>    0.0046</td> <td>    0.000</td> <td>   10.505</td> <td> 0.000</td> <td>    0.004</td> <td>    0.005</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Loan_Length</th>                   <td>    0.0323</td> <td>    0.001</td> <td>   23.311</td> <td> 0.000</td> <td>    0.030</td> <td>    0.035</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Loan_Purpose</th>                  <td>    0.0004</td> <td>    0.000</td> <td>    2.545</td> <td> 0.011</td> <td>    0.000</td> <td>    0.001</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Home_Ownership</th>                <td>    0.0012</td> <td>    0.000</td> <td>    4.174</td> <td> 0.000</td> <td>    0.001</td> <td>    0.002</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>FICO_Score_Scaled</th>             <td>   -0.0419</td> <td>    0.001</td> <td>  -44.475</td> <td> 0.000</td> <td>   -0.044</td> <td>   -0.040</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>21.985</td> <th>  Durbin-Watson:     </th> <td>   2.006</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  24.155</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.183</td> <th>  Prob(JB):          </th> <td>5.69e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.313</td> <th>  Cond. No.          </th> <td>    77.4</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:          Interest_Rate   R-squared:                       0.596\n",
       "Model:                            OLS   Adj. R-squared:                  0.595\n",
       "Method:                 Least Squares   F-statistic:                     408.4\n",
       "Date:                Sun, 14 Nov 2021   Prob (F-statistic):               0.00\n",
       "Time:                        14:21:44   Log-Likelihood:                 5553.8\n",
       "No. Observations:                2500   AIC:                        -1.109e+04\n",
       "Df Residuals:                    2490   BIC:                        -1.103e+04\n",
       "Df Model:                           9                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "=================================================================================================\n",
       "                                    coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-------------------------------------------------------------------------------------------------\n",
       "const                             0.1565      0.002     75.382      0.000       0.152       0.161\n",
       "Amount_Requested                  0.0037      0.002      2.273      0.023       0.001       0.007\n",
       "Amount_Funded_By_Investors        0.0070      0.002      4.368      0.000       0.004       0.010\n",
       "Debt_To_Income_Ratio              0.0271      0.008      3.492      0.000       0.012       0.042\n",
       "Open_Credit_Lines                -0.0025      0.001     -4.253      0.000      -0.004      -0.001\n",
       "Inquiries_in_the_last_6months     0.0046      0.000     10.505      0.000       0.004       0.005\n",
       "Loan_Length                       0.0323      0.001     23.311      0.000       0.030       0.035\n",
       "Loan_Purpose                      0.0004      0.000      2.545      0.011       0.000       0.001\n",
       "Home_Ownership                    0.0012      0.000      4.174      0.000       0.001       0.002\n",
       "FICO_Score_Scaled                -0.0419      0.001    -44.475      0.000      -0.044      -0.040\n",
       "==============================================================================\n",
       "Omnibus:                       21.985   Durbin-Watson:                   2.006\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               24.155\n",
       "Skew:                           0.183   Prob(JB):                     5.69e-06\n",
       "Kurtosis:                       3.313   Cond. No.                         77.4\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "col = ['Amount_Requested', 'Amount_Funded_By_Investors', 'Debt_To_Income_Ratio', \n",
    "       'Open_Credit_Lines', 'Inquiries_in_the_last_6months', 'Loan_Length', \n",
    "       'Loan_Purpose', 'Home_Ownership', 'FICO_Score_Scaled']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Amount_Requested</th>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <th>Interest_Rate</th>\n",
       "      <th>Debt_To_Income_Ratio</th>\n",
       "      <th>Monthly_Income</th>\n",
       "      <th>Open_Credit_Lines</th>\n",
       "      <th>Revolving_Credit_Balance</th>\n",
       "      <th>Inquiries_in_the_last_6months</th>\n",
       "      <th>Loan_Length</th>\n",
       "      <th>Loan_Purpose</th>\n",
       "      <th>Home_Ownership</th>\n",
       "      <th>Employment_Length</th>\n",
       "      <th>FICO_Score_Scaled</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.027044</td>\n",
       "      <td>1.079088</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.556836</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>0.271966</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.953494</td>\n",
       "      <td>1.002043</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.28</td>\n",
       "      <td>-0.119300</td>\n",
       "      <td>0.560697</td>\n",
       "      <td>0.028440</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.043753</td>\n",
       "      <td>1.995000</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.24</td>\n",
       "      <td>1.598158</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>0.743101</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.100780</td>\n",
       "      <td>-0.069295</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.14</td>\n",
       "      <td>-0.464711</td>\n",
       "      <td>0.131958</td>\n",
       "      <td>-0.133290</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.172163</td>\n",
       "      <td>0.203890</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.19</td>\n",
       "      <td>-0.820852</td>\n",
       "      <td>0.352453</td>\n",
       "      <td>0.285989</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Amount_Requested  Amount_Funded_By_Investors  Interest_Rate  \\\n",
       "0          1.027044                    1.079088           0.09   \n",
       "1          0.953494                    1.002043           0.12   \n",
       "2          2.043753                    1.995000           0.22   \n",
       "3         -0.100780                   -0.069295           0.10   \n",
       "4          0.172163                    0.203890           0.12   \n",
       "\n",
       "   Debt_To_Income_Ratio  Monthly_Income  Open_Credit_Lines  \\\n",
       "0                  0.15        0.556836           0.946340   \n",
       "1                  0.28       -0.119300           0.560697   \n",
       "2                  0.24        1.598158           0.946340   \n",
       "3                  0.14       -0.464711           0.131958   \n",
       "4                  0.19       -0.820852           0.352453   \n",
       "\n",
       "   Revolving_Credit_Balance  Inquiries_in_the_last_6months  Loan_Length  \\\n",
       "0                  0.271966                              2            0   \n",
       "1                  0.028440                              1            0   \n",
       "2                  0.743101                              1            1   \n",
       "3                 -0.133290                              0            0   \n",
       "4                  0.285989                              0            0   \n",
       "\n",
       "   Loan_Purpose  Home_Ownership  Employment_Length  FICO_Score_Scaled  \n",
       "0             2               0                  0                  1  \n",
       "1             2               0                  2                  1  \n",
       "2             2               0                  2                  1  \n",
       "3             2               0                  5                  1  \n",
       "4             1               4                  9                  1  "
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_data_final = updated_loan_data.copy()\n",
    "loan_data_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Amount_Requested                 9.350532\n",
       "Amount_Funded_By_Investors       9.357866\n",
       "Debt_To_Income_Ratio             3.529120\n",
       "Open_Credit_Lines                1.248460\n",
       "Inquiries_in_the_last_6months    1.539864\n",
       "Loan_Length                      1.502501\n",
       "Loan_Purpose                     2.172374\n",
       "Home_Ownership                   2.062166\n",
       "FICO_Score_Scaled                2.960335\n",
       "dtype: float64"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X1 = loan_data_final.loc[:,['Amount_Requested', 'Amount_Funded_By_Investors', 'Debt_To_Income_Ratio', \n",
    "       'Open_Credit_Lines', 'Inquiries_in_the_last_6months', 'Loan_Length', \n",
    "       'Loan_Purpose', 'Home_Ownership', 'FICO_Score_Scaled']]\n",
    "\n",
    "#####X1.info()\n",
    "series_before = pd.Series([variance_inflation_factor(X1.values, i) \n",
    "                          for i in range(X1.shape[1])], index=X1.columns)\n",
    "\n",
    "series_before"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Homoscedasticity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "Data = pd.concat([X_train[col], Y_train], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "Data['Fitted_value'] = final_model.fittedvalues\n",
    "Data['Residual'] = final_model.resid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "p = Data.plot.scatter(x='Fitted_value', y='Residual')\n",
    "plt.xlabel('Fitted values')\n",
    "plt.ylabel('Residuals')\n",
    "p = plt.title('Residuals vs fitted values plot for homoscedasicity check')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.11912343193906007 0.11901553752094747\n"
     ]
    }
   ],
   "source": [
    "# Run the Breusch - Pagan test\n",
    "_, pval2, __, f_pval2 = diag.het_breuschpagan(final_model.resid, final_model.model.exog)\n",
    "\n",
    "print(pval2, f_pval2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Normality"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pylab\n",
    "sm.qqplot(final_model.resid, line='s')\n",
    "pylab.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2ccc8a9c280>"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Data['Residual'].plot.hist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Prediction on test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test2 = X_test[col]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test2 = sm.add_constant(X_test2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>Amount_Requested</th>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <th>Debt_To_Income_Ratio</th>\n",
       "      <th>Open_Credit_Lines</th>\n",
       "      <th>Inquiries_in_the_last_6months</th>\n",
       "      <th>Loan_Length</th>\n",
       "      <th>Loan_Purpose</th>\n",
       "      <th>Home_Ownership</th>\n",
       "      <th>FICO_Score_Scaled</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.223701</td>\n",
       "      <td>1.286635</td>\n",
       "      <td>0.29</td>\n",
       "      <td>1.126036</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2391</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.397992</td>\n",
       "      <td>-1.273864</td>\n",
       "      <td>0.11</td>\n",
       "      <td>-0.102729</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2310</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.004999</td>\n",
       "      <td>-0.942915</td>\n",
       "      <td>0.13</td>\n",
       "      <td>-1.247196</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>728</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.527163</td>\n",
       "      <td>-0.476714</td>\n",
       "      <td>0.20</td>\n",
       "      <td>1.776272</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>850</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.004999</td>\n",
       "      <td>-1.031144</td>\n",
       "      <td>0.00</td>\n",
       "      <td>-1.247196</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      const  Amount_Requested  Amount_Funded_By_Investors  \\\n",
       "53      1.0          1.223701                    1.286635   \n",
       "2391    1.0         -1.397992                   -1.273864   \n",
       "2310    1.0         -1.004999                   -0.942915   \n",
       "728     1.0         -0.527163                   -0.476714   \n",
       "850     1.0         -1.004999                   -1.031144   \n",
       "\n",
       "      Debt_To_Income_Ratio  Open_Credit_Lines  Inquiries_in_the_last_6months  \\\n",
       "53                    0.29           1.126036                              0   \n",
       "2391                  0.11          -0.102729                              0   \n",
       "2310                  0.13          -1.247196                              0   \n",
       "728                   0.20           1.776272                              3   \n",
       "850                   0.00          -1.247196                              5   \n",
       "\n",
       "      Loan_Length  Loan_Purpose  Home_Ownership  FICO_Score_Scaled  \n",
       "53              1             2               4                  0  \n",
       "2391            0             2               0                  1  \n",
       "2310            0             3               3                  2  \n",
       "728             0             2               3                  1  \n",
       "850             0             6               4                  1  "
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predict=final_model.predict(X_test2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "test=pd.concat([X_test, Y_test], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Predicted']=y_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Amount_Requested</th>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <th>Debt_To_Income_Ratio</th>\n",
       "      <th>Monthly_Income</th>\n",
       "      <th>Open_Credit_Lines</th>\n",
       "      <th>Revolving_Credit_Balance</th>\n",
       "      <th>Inquiries_in_the_last_6months</th>\n",
       "      <th>Loan_Length</th>\n",
       "      <th>Loan_Purpose</th>\n",
       "      <th>Home_Ownership</th>\n",
       "      <th>Employment_Length</th>\n",
       "      <th>FICO_Score_Scaled</th>\n",
       "      <th>Interest_Rate</th>\n",
       "      <th>Predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>1.223701</td>\n",
       "      <td>1.286635</td>\n",
       "      <td>0.29</td>\n",
       "      <td>-0.303044</td>\n",
       "      <td>1.126036</td>\n",
       "      <td>0.260118</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.212885</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2391</th>\n",
       "      <td>-1.397992</td>\n",
       "      <td>-1.273864</td>\n",
       "      <td>0.11</td>\n",
       "      <td>-0.227300</td>\n",
       "      <td>-0.102729</td>\n",
       "      <td>-0.074680</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.104590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2310</th>\n",
       "      <td>-1.004999</td>\n",
       "      <td>-0.942915</td>\n",
       "      <td>0.13</td>\n",
       "      <td>-0.303044</td>\n",
       "      <td>-1.247196</td>\n",
       "      <td>-0.692619</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.073838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>728</th>\n",
       "      <td>-0.527163</td>\n",
       "      <td>-0.476714</td>\n",
       "      <td>0.20</td>\n",
       "      <td>-0.724877</td>\n",
       "      <td>1.776272</td>\n",
       "      <td>0.069104</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.128461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>850</th>\n",
       "      <td>-1.004999</td>\n",
       "      <td>-1.031144</td>\n",
       "      <td>0.00</td>\n",
       "      <td>-0.838372</td>\n",
       "      <td>-1.247196</td>\n",
       "      <td>-0.760203</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.137228</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Amount_Requested  Amount_Funded_By_Investors  Debt_To_Income_Ratio  \\\n",
       "53            1.223701                    1.286635                  0.29   \n",
       "2391         -1.397992                   -1.273864                  0.11   \n",
       "2310         -1.004999                   -0.942915                  0.13   \n",
       "728          -0.527163                   -0.476714                  0.20   \n",
       "850          -1.004999                   -1.031144                  0.00   \n",
       "\n",
       "      Monthly_Income  Open_Credit_Lines  Revolving_Credit_Balance  \\\n",
       "53         -0.303044           1.126036                  0.260118   \n",
       "2391       -0.227300          -0.102729                 -0.074680   \n",
       "2310       -0.303044          -1.247196                 -0.692619   \n",
       "728        -0.724877           1.776272                  0.069104   \n",
       "850        -0.838372          -1.247196                 -0.760203   \n",
       "\n",
       "      Inquiries_in_the_last_6months  Loan_Length  Loan_Purpose  \\\n",
       "53                                0            1             2   \n",
       "2391                              0            0             2   \n",
       "2310                              0            0             3   \n",
       "728                               3            0             2   \n",
       "850                               5            0             6   \n",
       "\n",
       "      Home_Ownership  Employment_Length  FICO_Score_Scaled  Interest_Rate  \\\n",
       "53                 4                  9                  0           0.21   \n",
       "2391               0                  1                  1           0.12   \n",
       "2310               3                  3                  2           0.09   \n",
       "728                3                  1                  1           0.12   \n",
       "850                4                  0                  1           0.11   \n",
       "\n",
       "      Predicted  \n",
       "53     0.212885  \n",
       "2391   0.104590  \n",
       "2310   0.073838  \n",
       "728    0.128461  \n",
       "850    0.137228  "
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### PErformance on Test Data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE 0.000688\n",
      "MAE 0.0208\n",
      "RMSE 0.0262\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "# calculate the mean squared Error\n",
    "model_mse = mean_squared_error(test['Interest_Rate'], test['Predicted'])\n",
    "\n",
    "# calculate the mean absolute Error\n",
    "model_mae = mean_absolute_error(test['Interest_Rate'], test['Predicted'])\n",
    "\n",
    "# calculate the root mean squared Error\n",
    "model_rmse = math.sqrt(model_mse)\n",
    "\n",
    "# display the output\n",
    "print(\"MSE {:.3}\".format(model_mse))\n",
    "print(\"MAE {:.3}\".format(model_mae))\n",
    "print(\"RMSE {:.3}\".format(model_rmse))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Peformance on training data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE 0.000689\n",
      "MAE 0.0206\n",
      "RMSE 0.0262\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "# calculate the mean squared error\n",
    "model_mse = mean_squared_error(Data['Interest_Rate'], Data['Fitted_value'])\n",
    "\n",
    "# calculate the mean absolute Error\n",
    "model_mae = mean_absolute_error(Data['Interest_Rate'], Data['Fitted_value'])\n",
    "\n",
    "# calculate the root mean squared Error\n",
    "model_rmse = math.sqrt(model_mse)\n",
    "\n",
    "# display the output\n",
    "print(\"MSE {:.3}\".format(model_mse))\n",
    "print(\"MAE {:.3}\".format(model_mae))\n",
    "print(\"RMSE {:.3}\".format(model_rmse))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear Regression MSE-score train:  0.0006847585250773496\n",
      "Linear Regression R2-score train:  0.6013625544784345\n",
      "Linear Regression MAE-score train:  0.020500128619537553\n",
      "Linear Regression MSE-score test:  0.0007049407206951018\n",
      "Linear Regression R2-score test:  0.5791595660865176\n",
      "Linear Regression MAE-score test:  0.021048241650024165\n"
     ]
    }
   ],
   "source": [
    "# linear regression feature importance\n",
    "\n",
    "# define the model\n",
    "model_lr = LinearRegression()\n",
    "# fit the model\n",
    "model_lr.fit(X_train, Y_train)\n",
    "# get importance\n",
    "\n",
    "\n",
    "model_lr_train_pred = model_lr.predict(X_train)\n",
    "model_lr_test_pred = model_lr.predict(X_test)\n",
    "\n",
    "error_mse_lr_train = mean_squared_error(Y_train, model_lr_train_pred)\n",
    "print('Linear Regression MSE-score train: ', error_mse_lr_train)\n",
    "error_r2_lr_train = r2_score(Y_train, model_lr_train_pred)\n",
    "print('Linear Regression R2-score train: ', error_r2_lr_train)\n",
    "error_mae_lr_train = mean_absolute_error(Y_train, model_lr_train_pred)\n",
    "print('Linear Regression MAE-score train: ', error_mae_lr_train)\n",
    "\n",
    "error_mse_lr_tst = mean_squared_error(Y_test, model_lr_test_pred)\n",
    "print('Linear Regression MSE-score test: ', error_mse_lr_tst)\n",
    "error_r2_lr_tst = r2_score(Y_test, model_lr_test_pred)\n",
    "print('Linear Regression R2-score test: ', error_r2_lr_tst)\n",
    "error_mae_lr_tst = mean_absolute_error(Y_test, model_lr_test_pred)\n",
    "print('Linear Regression MAE-score test: ', error_mae_lr_tst)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature: 0, Score: 0.00425\n",
      "Feature: 1, Score: 0.00709\n",
      "Feature: 2, Score: 0.02446\n",
      "Feature: 3, Score: -0.00109\n",
      "Feature: 4, Score: -0.00211\n",
      "Feature: 5, Score: -0.00056\n",
      "Feature: 6, Score: 0.00460\n",
      "Feature: 7, Score: 0.03203\n",
      "Feature: 8, Score: 0.00046\n",
      "Feature: 9, Score: 0.00104\n",
      "Feature: 10, Score: -0.00010\n",
      "Feature: 11, Score: -0.04205\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAD4CAYAAADhNOGaAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAASMklEQVR4nO3df6jd933f8eerUkSbdMM2lh1Zkietu2QVoU28i+IuMLbaHpJTIq9dQBpL1DRFmFpbOjpatYaWMQaCjm4NEzZa6lVhboRJEyySuymO1hEKcybZTRyriuqLGkc3Uq3blDrdAlPVvPvH/Wo5vjrX98f3SEdXn+cDLuf7+Xzfn/N9Hyyf1/1+zzn3pKqQJLXr+8bdgCRpvAwCSWqcQSBJjTMIJKlxBoEkNW7tuBtYiTvvvLO2bNky7jYkaVV54YUX/rSq1s+fX5VBsGXLFk6dOjXuNiRpVUny6rB5Lw1JUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGrcqP1Am6Xu2HPjcSO/v6wffN9L7083PMwJJatxIgiDJjiRnk0wnOTBkf5J8rNv/UpL7uvnvT/K/k3wlyekk/2YU/UiSlq53ECRZAxwCdgLbgD1Jts0r2wlMdD/7gCe6+f8H/HhV/SjwLmBHkvv79iRJWrpRnBFsB6ar6lxVXQaOArvm1ewCPlFzngduS7KhG/+fruYt3Y9foixJN9AogmAjcH5gPNPNLakmyZokXwYuAc9V1ZdG0JMkaYlGEQQZMjf/t/oFa6rqr6rqXcAmYHuSdw49SLIvyakkp2ZnZ3s1LEn6nlEEwQyweWC8Cbiw3Jqq+nPgfwI7hh2kqg5X1WRVTa5ff833KkiSVmgUQXASmEiyNck6YDdwbF7NMeBD3buH7gder6qLSdYnuQ0gyQ8ADwJfG0FPkqQl6v2Bsqq6kmQ/cBxYAzxVVaeTPNrtfxKYAh4GpoHvAB/ulm8AjnTvPPo+4Jmq+mzfniRJSzeSTxZX1RRzT/aDc08ObBfw2JB1LwHvHkUPkqSV8ZPFktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOL+zeJXz+2ol9eUZgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxIwmCJDuSnE0yneTAkP1J8rFu/0tJ7uvmNyf5vSRnkpxO8tFR9CNJWrreQdB98fwhYCewDdiTZNu8sp3ARPezD3iim78C/EJV/TBwP/DYkLWSpOtoFGcE24HpqjpXVZeBo8CueTW7gE/UnOeB25JsqKqLVfUiQFX9BXAG2DiCniRJSzSKINgInB8Yz3Dtk/miNUm2AO8GvjTsIEn2JTmV5NTs7GzPliVJV40iCDJkrpZTk+QHgd8Ffr6qvj3sIFV1uKomq2py/fr1K25WkvRGowiCGWDzwHgTcGGpNUnewlwIPF1Vnx5BP5KkZRhFEJwEJpJsTbIO2A0cm1dzDPhQ9+6h+4HXq+pikgC/BZypqt8YQS+SpGXq/X0EVXUlyX7gOLAGeKqqTid5tNv/JDAFPAxMA98BPtwtfy/wQeCrSb7czf1KVU317UuStDQj+WKa7ol7at7ckwPbBTw2ZN3vM/z1A0nSDeIniyWpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNW4kQZBkR5KzSaaTHBiyP0k+1u1/Kcl9A/ueSnIpycuj6EWStDy9gyDJGuAQsBPYBuxJsm1e2U5govvZBzwxsO+3gR19+5Akrcwozgi2A9NVda6qLgNHgV3zanYBn6g5zwO3JdkAUFVfBP5sBH1IklZgFEGwETg/MJ7p5pZb86aS7EtyKsmp2dnZFTUqSbrWKIIgQ+ZqBTVvqqoOV9VkVU2uX79+OUslSW9iFEEwA2weGG8CLqygRpI0BqMIgpPARJKtSdYBu4Fj82qOAR/q3j10P/B6VV0cwbElST31DoKqugLsB44DZ4Bnqup0kkeTPNqVTQHngGngPwM/d3V9kk8C/wt4R5KZJB/p25MkaenWjuJOqmqKuSf7wbknB7YLeGyBtXtG0YMkaWX8ZLEkNc4gkKTGjeTSkK615cDnRn6fXz/4vpHfpyR5RiBJjTMIJKlxBoEkNc4gkKTGGQSS1DjfNSRdJ75zTKtFc0Hg/5yS9EZeGpKkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1biQfKEuyA/hNYA3w8ao6OG9/uv0PA98BfrqqXlzKWknt8AOf49E7CJKsAQ4BDwEzwMkkx6rqDwfKdgIT3c97gCeA9yxxraSbwKifpH2CvnmM4tLQdmC6qs5V1WXgKLBrXs0u4BM153ngtiQblrhWknQdpar63UHyT4EdVfWz3fiDwHuqav9AzWeBg1X1+934BPBLwJbF1g7cxz5gH8C9997791599dVefWt5bsRvgzfqsoCXH3Sj3Gz/1pK8UFWT8+dH8RpBhszNT5eFapaydm6y6jBwGGBycrJfeqlpPmlLbzSKIJgBNg+MNwEXllizbglrJUnX0SiC4CQwkWQr8E1gN/DP5tUcA/YnOcrci8WvV9XFJLNLWKubgL9FS7eu3kFQVVeS7AeOM/cW0Keq6nSSR7v9TwJTzL11dJq5t49++M3W9u1JkrR0I/kcQVVNMfdkPzj35MB2AY8tda3a5FmHNB5+sliSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIa1ysIktyR5Lkkr3S3ty9QtyPJ2STTSQ4MzH8gyekk300y2acXSdLK9D0jOACcqKoJ4EQ3foMka4BDwE5gG7AnybZu98vATwJf7NmHJGmF+gbBLuBIt30EeGRIzXZguqrOVdVl4Gi3jqo6U1Vne/YgSeqhbxDcXVUXAbrbu4bUbATOD4xnurllSbIvyakkp2ZnZ1fUrCTpWmsXK0jyBeDtQ3Y9vsRjZMhcLXHt9xZUHQYOA0xOTi57vSRpuEWDoKoeXGhfkteSbKiqi0k2AJeGlM0AmwfGm4ALy+5UknRd9L00dAzY223vBZ4dUnMSmEiyNck6YHe3TpJ0E+gbBAeBh5K8AjzUjUlyT5IpgKq6AuwHjgNngGeq6nRX90+SzAA/BnwuyfGe/UiSlmnRS0Nvpqq+BTwwZP4C8PDAeAqYGlL3GeAzfXqQJPXjJ4slqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDWuVxAkuSPJc0le6W5vX6BuR5KzSaaTHBiY//UkX0vyUpLPJLmtTz+SpOXre0ZwADhRVRPAiW78BknWAIeAncA2YE+Sbd3u54B3VtWPAH8E/HLPfiRJy9Q3CHYBR7rtI8AjQ2q2A9NVda6qLgNHu3VU1eer6kpX9zywqWc/kqRl6hsEd1fVRYDu9q4hNRuB8wPjmW5uvp8B/ttCB0qyL8mpJKdmZ2d7tCxJGrR2sYIkXwDePmTX40s8RobM1bxjPA5cAZ5e6E6q6jBwGGBycrIWqpMkLc+iQVBVDy60L8lrSTZU1cUkG4BLQ8pmgM0D403AhYH72Av8BPBAVfkEL0k3WN9LQ8eAvd32XuDZITUngYkkW5OsA3Z360iyA/gl4P1V9Z2evUiSVqBvEBwEHkryCvBQNybJPUmmALoXg/cDx4EzwDNVdbpb/5+AvwE8l+TLSZ7s2Y8kaZkWvTT0ZqrqW8ADQ+YvAA8PjKeAqSF1f6fP8SVJ/fnJYklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjesVBEnuSPJckle629sXqNuR5GyS6SQHBub/bZKXuu8r/nySe/r0I0lavr5nBAeAE1U1AZzoxm+QZA1wCNgJbAP2JNnW7f71qvqRqnoX8FngV3v2I0lapr5BsAs40m0fAR4ZUrMdmK6qc1V1GTjaraOqvj1Q9zagevYjSVqmtT3X311VFwGq6mKSu4bUbATOD4xngPdcHST5d8CHgNeBf7TQgZLsA/YB3HvvvT3bliRdtegZQZIvJHl5yM+uJR4jQ+b+/2/+VfV4VW0Gngb2L3QnVXW4qiaranL9+vVLPLQkaTGLnhFU1YML7UvyWpIN3dnABuDSkLIZYPPAeBNwYUjd7wCfA35tsZ4kSaPT9zWCY8Debnsv8OyQmpPARJKtSdYBu7t1JJkYqHs/8LWe/UiSlqnvawQHgWeSfAT4BvABgO5toB+vqoer6kqS/cBxYA3wVFWdvro+yTuA7wKvAo/27EeStEy9gqCqvgU8MGT+AvDwwHgKmBpS91N9ji9J6s9PFktS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjegVBkjuSPJfkle729gXqdiQ5m2Q6yYEh+/91kkpyZ59+JEnL1/eM4ABwoqomgBPd+A2SrAEOATuBbcCeJNsG9m8GHmLuO48lSTdY3yDYBRzpto8Ajwyp2Q5MV9W5qroMHO3WXfUfgF8EqmcvkqQV6BsEd1fVRYDu9q4hNRuB8wPjmW6OJO8HvllVX1nsQEn2JTmV5NTs7GzPtiVJV61drCDJF4C3D9n1+BKPkSFzleSt3X3846XcSVUdBg4DTE5OevYgSSOyaBBU1YML7UvyWpINVXUxyQbg0pCyGWDzwHgTcAH4IWAr8JUkV+dfTLK9qv5kGY9BktRD30tDx4C93fZe4NkhNSeBiSRbk6wDdgPHquqrVXVXVW2pqi3MBcZ9hoAk3Vh9g+Ag8FCSV5h7589BgCT3JJkCqKorwH7gOHAGeKaqTvc8riRpRBa9NPRmqupbwAND5i8ADw+Mp4CpRe5rS59eJEkr0ysIJEkL+/rB9427hSXxT0xIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjUrX6/qJzklng1et8mDuBP73Ox7iRfDw3r1vpscCt9XhupccC8Leqav38yVUZBDdCklNVNTnuPkbFx3PzupUeC9xaj+dWeixvxktDktQ4g0CSGmcQLOzwuBsYMR/PzetWeixwaz2eW+mxLMjXCCSpcZ4RSFLjDAJJapxBMESSHUnOJplOcmDc/fSRZHOS30tyJsnpJB8dd099JVmT5A+SfHbcvfSV5LYkn0ryte6/0Y+Nu6eVSvKvun9jLyf5ZJLvH3dPy5HkqSSXkrw8MHdHkueSvNLd3j7OHq8Xg2CeJGuAQ8BOYBuwJ8m28XbVyxXgF6rqh4H7gcdW+eMB+ChwZtxNjMhvAv+9qv4u8KOs0seVZCPwL4HJqnonsAbYPd6ulu23gR3z5g4AJ6pqAjjRjW85BsG1tgPTVXWuqi4DR4FdY+5pxarqYlW92G3/BXNPNBvH29XKJdkEvA/4+Lh76SvJ3wT+AfBbAFV1uar+fLxd9bIW+IEka4G3AhfG3M+yVNUXgT+bN70LONJtHwEeuaFN3SAGwbU2AucHxjOs4ifOQUm2AO8GvjTeTnr5j8AvAt8ddyMj8LeBWeC/dJe6Pp7kbeNuaiWq6pvAvwe+AVwEXq+qz4+3q5G4u6ouwtwvVcBdY+7nujAIrpUhc6v+PbZJfhD4XeDnq+rb4+5nJZL8BHCpql4Ydy8jsha4D3iiqt4N/F9W6aWH7tr5LmArcA/wtiT/fLxdaakMgmvNAJsHxptYZae48yV5C3Mh8HRVfXrc/fTwXuD9Sb7O3CW7H0/yX8fbUi8zwExVXT1D+xRzwbAaPQj8cVXNVtVfAp8G/v6YexqF15JsAOhuL425n+vCILjWSWAiydYk65h7wevYmHtasSRh7hr0mar6jXH300dV/XJVbaqqLcz9d/kfVbVqf+usqj8Bzid5Rzf1APCHY2ypj28A9yd5a/dv7gFW6Qvf8xwD9nbbe4Fnx9jLdbN23A3cbKrqSpL9wHHm3vnwVFWdHnNbfbwX+CDw1SRf7uZ+paqmxtiTvudfAE93v3ScAz485n5WpKq+lORTwIvMvVPtD1hlf54hySeBfwjcmWQG+DXgIPBMko8wF3YfGF+H149/YkKSGuelIUlqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGvfXUMJI9Lm3ejgAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# get importance\n",
    "importance_lr = model_lr.coef_\n",
    "# summarize feature importance\n",
    "for i,v in enumerate(importance_lr):\n",
    "\tprint('Feature: %0d, Score: %.5f' % (i,v))\n",
    "# plot feature importance\n",
    "plt.bar([x for x in range(len(importance_lr))], importance_lr)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "feat_importances_lr = pd.Series(importance_lr, index=X.columns)\n",
    "feat_importances_lr.nlargest(12).plot(kind='barh')\n",
    "plt.title(\"Top important features\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Amount_Requested                 0.004253\n",
       "Amount_Funded_By_Investors       0.007089\n",
       "Debt_To_Income_Ratio             0.024463\n",
       "Monthly_Income                  -0.001092\n",
       "Open_Credit_Lines               -0.002110\n",
       "Revolving_Credit_Balance        -0.000559\n",
       "Inquiries_in_the_last_6months    0.004601\n",
       "Loan_Length                      0.032029\n",
       "Loan_Purpose                     0.000461\n",
       "Home_Ownership                   0.001039\n",
       "Employment_Length               -0.000102\n",
       "FICO_Score_Scaled               -0.042054\n",
       "dtype: float64"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feat_importances_lr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model #9: Ridge Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, estimator=Ridge(),\n",
       "             param_grid={'alpha': [1e-15, 1e-10, 1e-08, 0.001, 0.01, 1, 5, 10,\n",
       "                                   20, 30, 35, 40, 45, 50, 55, 100]},\n",
       "             scoring='neg_mean_squared_error')"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ridge=Ridge()\n",
    "parameters={'alpha':[1e-15,1e-10,1e-8,1e-3,1e-2,1,5,10,20,30,35,40,45,50,55,100]}\n",
    "ridge_regressor=GridSearchCV(ridge, parameters, scoring='neg_mean_squared_error', cv=5)\n",
    "ridge_regressor.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 1}\n",
      "-0.0006987652517355204\n"
     ]
    }
   ],
   "source": [
    "print(ridge_regressor.best_params_)\n",
    "print(ridge_regressor.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ridge(alpha=10)"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ridge_final_mod = Ridge(alpha=10)\n",
    "ridge_final_mod.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Prediction on train data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prediction\n",
    "ridge_train_pred = ridge_final_mod.predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "ridge_train=pd.concat([X_train,Y_train],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score  Ridge train:  0.6009076537533733\n",
      "MSE  Ridge train:  0.0006855399297172021\n",
      "MAE Ridge train:  0.020521593857352277\n"
     ]
    }
   ],
   "source": [
    "error_r2_train_ridge = r2_score(Y_train, ridge_train_pred)\n",
    "print('R2 Score  Ridge train: ', error_r2_train_ridge)\n",
    "\n",
    "error_mse_train_ridge = mean_squared_error(Y_train, ridge_train_pred)\n",
    "print('MSE  Ridge train: ', error_mse_train_ridge)\n",
    "\n",
    "error_mae_train_ridge = mean_absolute_error(Y_train, ridge_train_pred)\n",
    "print('MAE Ridge train: ', error_mae_train_ridge)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### prediction on test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "ridge_test_pred = ridge_final_mod.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "ridge_test=pd.concat([X_test, Y_test],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score  Ridge test:  0.5774971391551291\n",
      "MSE  Ridge test:  0.000707725416139449\n",
      "MAE Ridge test:  0.0210924793333642\n"
     ]
    }
   ],
   "source": [
    "error_r2_test_ridge = r2_score(Y_test, ridge_test_pred)\n",
    "print('R2 Score  Ridge test: ', error_r2_test_ridge)\n",
    "\n",
    "error_mse_test_ridge = mean_squared_error(Y_test, ridge_test_pred)\n",
    "print('MSE  Ridge test: ', error_mse_test_ridge)\n",
    "\n",
    "error_mae_test_ridge = mean_absolute_error(Y_test, ridge_test_pred)\n",
    "print('MAE Ridge test: ', error_mae_test_ridge)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Predicted_ridge_tst']=ridge_test_pred"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7. MODEL EVALUATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DECISION TREE REGRESSOR:\n",
      "R2 Score train - Decision Tree Regressor:  1.0\n",
      "R2 Score test - Decision Tree Regressor:  0.24485126586711803\n",
      "R2 Score CV - Decision Tree Regressor:  0.2285678169210082\n",
      "\n",
      "RANDOM FOREST REGRESSOR:\n",
      "R2 Score train - Randomforest Regressor:  0.9430551005748944\n",
      "R2 Score test - Randomforest Regressor:  0.5911008185248721\n",
      "R2 Score CV - Randomforest Regressor:  0.5985738824757266\n",
      "\n",
      "ADABOOST REGRESSOR:\n",
      "R2 Score train - AdaBoost Regressor:  0.5333594684376137\n",
      "R2 Score test - AdaBoost Regressor:  0.516120567922871\n",
      "R2 Score CV - AdaBoost Regressor:  0.5241308039323802\n",
      "\n",
      "GRADIENTBOOST REGRESSOR:\n",
      "R2 Score train - GradientBoost Regressor:  0.7176362251232182\n",
      "R2 Score test - GradientBoost Regressor:  0.6323377192651223\n",
      "R2 Score CV - GradientBoost Regressor:  0.6290512654375624\n",
      "\n",
      "XGBOOST REGRESSOR:\n",
      "R2 Score train - XGBoost Regressor:  0.9854425789604642\n",
      "R2 Score test - XGBoost Regressor:  0.5452721403109422\n",
      "R2 Score CV - XGBoost Regressor:  0.5646543605543897\n"
     ]
    }
   ],
   "source": [
    "print('DECISION TREE REGRESSOR:')\n",
    "print('R2 Score train - Decision Tree Regressor: ', error_dtreg_r2_train)\n",
    "print('R2 Score test - Decision Tree Regressor: ', error_dtreg_r2_test)\n",
    "print('R2 Score CV - Decision Tree Regressor: ', score_dt.mean())\n",
    "print('')\n",
    "print('RANDOM FOREST REGRESSOR:')\n",
    "print('R2 Score train - Randomforest Regressor: ', error_rfreg_r2_train)\n",
    "print('R2 Score test - Randomforest Regressor: ', error_rfreg_r2_test)\n",
    "print('R2 Score CV - Randomforest Regressor: ', score_rf.mean())\n",
    "print('')\n",
    "print('ADABOOST REGRESSOR:')\n",
    "print('R2 Score train - AdaBoost Regressor: ', error_adabst_r2_train)\n",
    "print('R2 Score test - AdaBoost Regressor: ', error_adabst_r2_test)\n",
    "print('R2 Score CV - AdaBoost Regressor: ', score_adabst.mean())\n",
    "print('')\n",
    "print('GRADIENTBOOST REGRESSOR:')\n",
    "print('R2 Score train - GradientBoost Regressor: ', error_gbr_r2_train)\n",
    "print('R2 Score test - GradientBoost Regressor: ', error_gbr_r2_test)\n",
    "print('R2 Score CV - GradientBoost Regressor: ', score_gbr.mean())\n",
    "print('')\n",
    "print('XGBOOST REGRESSOR:')\n",
    "print('R2 Score train - XGBoost Regressor: ', error_xgbr_r2_train)\n",
    "print('R2 Score test - XGBoost Regressor: ', error_xgbr_r2_test)\n",
    "print('R2 Score CV - XGBoost Regressor: ', score_xgbr.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DECISION TREE REGRESSOR:\n",
    "R2 Score train - Decision Tree Regressor:  1.0\n",
    "R2 Score test - Decision Tree Regressor:  0.21579789936996396\n",
    "R2 Score CV - Decision Tree Regressor:  0.19956386951711724\n",
    "\n",
    "RANDOM FOREST REGRESSOR:\n",
    "R2 Score train - Randomforest Regressor:  0.9445693193560487\n",
    "R2 Score test - Randomforest Regressor:  0.5879365089220101\n",
    "R2 Score CV - Randomforest Regressor:  0.6008861560930632\n",
    "\n",
    "ADABOOST REGRESSOR:\n",
    "R2 Score train - AdaBoost Regressor:  0.577644443995138\n",
    "R2 Score test - AdaBoost Regressor:  0.5514589136209411\n",
    "R2 Score CV - AdaBoost Regressor:  0.5235785487620415\n",
    "\n",
    "GRADIENTBOOST REGRESSOR:\n",
    "R2 Score train - GradientBoost Regressor:  0.7176362251232182\n",
    "R2 Score test - GradientBoost Regressor:  0.6306124302603648\n",
    "R2 Score CV - GradientBoost Regressor:  0.6292665330365408\n",
    "\n",
    "XGBOOST REGRESSOR:\n",
    "R2 Score train - XGBoost Regressor:  0.9854425789604642\n",
    "R2 Score test - XGBoost Regressor:  0.5458095621747681\n",
    "R2 Score CV - XGBoost Regressor:  0.5648168702287834"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_cols = ['Interest_Rate','Predicted','Predicted_dtreg_tst','Predicted_rfreg_tst','Predicted_adabst_tst',\n",
    "             'Predicted_gbr_tst','Predicted_xgbr_tst','Predicted_svr_tst','Predicted_knn_tst','Predicted_ridge_tst']\n",
    "test[pred_cols].head(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_intr_pred=test[pred_cols]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_intr_pred.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "final_intr_pred.to_csv(r'C:\\Users\\RONALD\\Desktop\\IMS-Classroom\\Python Code\\Resume Project - ML Algo\\Loan Interest Rate prediction\\final_intr_pred_analysis.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*****************************************************************************"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Building model with selected features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Decision Tree\n",
    "Columns: FICO_Score_Scaled,Loan_Length,Amount_Requested,Monthly_Income,Open_Credit_Lines,Revolving_Credit_Balance,Amount_Funded_By_Investors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'dat_dtr' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-165-f3057430fe62>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0msel_col_dt\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;34m'FICO_Score_Scaled'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'Loan_Length'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'Amount_Requested'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'Monthly_Income'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'Open_Credit_Lines'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'Revolving_Credit_Balance'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'Amount_Funded_By_Investors'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'Interest_Rate'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mdata_dtr\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mupdated_loan_data\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0msel_col_dt\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mdat_dtr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'dat_dtr' is not defined"
     ]
    }
   ],
   "source": [
    "sel_col_dt = ['FICO_Score_Scaled','Loan_Length','Amount_Requested','Monthly_Income','Open_Credit_Lines','Revolving_Credit_Balance','Amount_Funded_By_Investors','Interest_Rate']\n",
    "data_dtr = updated_loan_data[sel_col_dt]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FICO_Score_Scaled</th>\n",
       "      <th>Loan_Length</th>\n",
       "      <th>Amount_Requested</th>\n",
       "      <th>Monthly_Income</th>\n",
       "      <th>Open_Credit_Lines</th>\n",
       "      <th>Revolving_Credit_Balance</th>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <th>Interest_Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.027044</td>\n",
       "      <td>0.556836</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>0.271966</td>\n",
       "      <td>1.079088</td>\n",
       "      <td>0.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.953494</td>\n",
       "      <td>-0.119300</td>\n",
       "      <td>0.560697</td>\n",
       "      <td>0.028440</td>\n",
       "      <td>1.002043</td>\n",
       "      <td>0.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.043753</td>\n",
       "      <td>1.598158</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>0.743101</td>\n",
       "      <td>1.995000</td>\n",
       "      <td>0.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.100780</td>\n",
       "      <td>-0.464711</td>\n",
       "      <td>0.131958</td>\n",
       "      <td>-0.133290</td>\n",
       "      <td>-0.069295</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.172163</td>\n",
       "      <td>-0.820852</td>\n",
       "      <td>0.352453</td>\n",
       "      <td>0.285989</td>\n",
       "      <td>0.203890</td>\n",
       "      <td>0.12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   FICO_Score_Scaled  Loan_Length  Amount_Requested  Monthly_Income  \\\n",
       "0                  1            0          1.027044        0.556836   \n",
       "1                  1            0          0.953494       -0.119300   \n",
       "2                  1            1          2.043753        1.598158   \n",
       "3                  1            0         -0.100780       -0.464711   \n",
       "4                  1            0          0.172163       -0.820852   \n",
       "\n",
       "   Open_Credit_Lines  Revolving_Credit_Balance  Amount_Funded_By_Investors  \\\n",
       "0           0.946340                  0.271966                    1.079088   \n",
       "1           0.560697                  0.028440                    1.002043   \n",
       "2           0.946340                  0.743101                    1.995000   \n",
       "3           0.131958                 -0.133290                   -0.069295   \n",
       "4           0.352453                  0.285989                    0.203890   \n",
       "\n",
       "   Interest_Rate  \n",
       "0           0.09  \n",
       "1           0.12  \n",
       "2           0.22  \n",
       "3           0.10  \n",
       "4           0.12  "
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_dtr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1750, 7), (750, 7))"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_dtr = data_dtr.drop(['Interest_Rate'], axis=1)\n",
    "Y_dtr = data_dtr['Interest_Rate']\n",
    "X_train_dtr, X_test_dtr, Y_train_dtr, Y_test_dtr = train_test_split(X_dtr, Y_dtr, test_size=0.3, random_state=0)\n",
    "X_train_dtr.shape, X_test_dtr.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor()"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fs_dtr = DecisionTreeRegressor()\n",
    "fs_dtr.fit(X_train_dtr, Y_train_dtr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-train-fs:  1.0\n",
      "MSE Score-train-fs:  3.301594190378119e-36\n",
      "MAE Score-train-fs:  1.427429603089487e-19\n"
     ]
    }
   ],
   "source": [
    "fs_train_pred = fs_dtr.predict(X_train_dtr)\n",
    "fs_error_dtr_r2_train = r2_score(Y_train_dtr, fs_train_pred)\n",
    "print('R2 Score-train-fs: ', fs_error_dtr_r2_train)\n",
    "fs_error_dtr_mse_train = mean_squared_error(Y_train_dtr, fs_train_pred)\n",
    "print('MSE Score-train-fs: ', fs_error_dtr_mse_train)\n",
    "fs_error_dtr_mae_train = mean_absolute_error(Y_train_dtr, fs_train_pred)\n",
    "print('MAE Score-train-fs: ', fs_error_dtr_mae_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-test-fs:  0.17878470643523336\n",
      "MSE Score-test-fs:  0.0013755999999999998\n",
      "MAE Score-test-fs:  0.02894666666666667\n"
     ]
    }
   ],
   "source": [
    "fs_test_pred = fs_dtr.predict(X_test_dtr)\n",
    "fs_error_dtr_r2_test = r2_score(Y_test_dtr, fs_test_pred)\n",
    "print('R2 Score-test-fs: ', fs_error_dtr_r2_test)\n",
    "fs_error_dtr_mse_test = mean_squared_error(Y_test_dtr, fs_test_pred)\n",
    "print('MSE Score-test-fs: ', fs_error_dtr_mse_test)\n",
    "fs_error_dtr_mae_test = mean_absolute_error(Y_test_dtr, fs_test_pred)\n",
    "print('MAE Score-test-fs: ', fs_error_dtr_mae_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.20202680785516516\n"
     ]
    }
   ],
   "source": [
    "kfolds = KFold(n_splits=10)\n",
    "fs_score_dtr = cross_val_score(fs_dtr, X_dtr, Y_dtr, cv=kfolds)\n",
    "print(fs_score_dtr.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Random Forest\n",
    "col: FICO_Score_Scaled,Loan_Length,Amount_Funded_By_Investors,Revolving_Credit_Balance,Monthly_Income,Open_Credit_Lines,Amount_Requested"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [],
   "source": [
    "sel_col_rf = ['FICO_Score_Scaled','Loan_Length','Amount_Funded_By_Investors','Revolving_Credit_Balance','Monthly_Income','Open_Credit_Lines','Amount_Requested','Interest_Rate']\n",
    "data_rf = updated_loan_data[sel_col_rf]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FICO_Score_Scaled</th>\n",
       "      <th>Loan_Length</th>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <th>Revolving_Credit_Balance</th>\n",
       "      <th>Monthly_Income</th>\n",
       "      <th>Open_Credit_Lines</th>\n",
       "      <th>Amount_Requested</th>\n",
       "      <th>Interest_Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.079088</td>\n",
       "      <td>0.271966</td>\n",
       "      <td>0.556836</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>1.027044</td>\n",
       "      <td>0.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.002043</td>\n",
       "      <td>0.028440</td>\n",
       "      <td>-0.119300</td>\n",
       "      <td>0.560697</td>\n",
       "      <td>0.953494</td>\n",
       "      <td>0.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.995000</td>\n",
       "      <td>0.743101</td>\n",
       "      <td>1.598158</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>2.043753</td>\n",
       "      <td>0.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.069295</td>\n",
       "      <td>-0.133290</td>\n",
       "      <td>-0.464711</td>\n",
       "      <td>0.131958</td>\n",
       "      <td>-0.100780</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.203890</td>\n",
       "      <td>0.285989</td>\n",
       "      <td>-0.820852</td>\n",
       "      <td>0.352453</td>\n",
       "      <td>0.172163</td>\n",
       "      <td>0.12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   FICO_Score_Scaled  Loan_Length  Amount_Funded_By_Investors  \\\n",
       "0                  1            0                    1.079088   \n",
       "1                  1            0                    1.002043   \n",
       "2                  1            1                    1.995000   \n",
       "3                  1            0                   -0.069295   \n",
       "4                  1            0                    0.203890   \n",
       "\n",
       "   Revolving_Credit_Balance  Monthly_Income  Open_Credit_Lines  \\\n",
       "0                  0.271966        0.556836           0.946340   \n",
       "1                  0.028440       -0.119300           0.560697   \n",
       "2                  0.743101        1.598158           0.946340   \n",
       "3                 -0.133290       -0.464711           0.131958   \n",
       "4                  0.285989       -0.820852           0.352453   \n",
       "\n",
       "   Amount_Requested  Interest_Rate  \n",
       "0          1.027044           0.09  \n",
       "1          0.953494           0.12  \n",
       "2          2.043753           0.22  \n",
       "3         -0.100780           0.10  \n",
       "4          0.172163           0.12  "
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_rf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1750, 7), (750, 7))"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_rf = data_rf.drop(['Interest_Rate'], axis=1)\n",
    "Y_rf = data_rf['Interest_Rate']\n",
    "X_train_rf, X_test_rf, Y_train_rf, Y_test_rf = train_test_split(X_rf, Y_rf, test_size=0.3, random_state=0)\n",
    "X_train_rf.shape, X_test_rf.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor()"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fs_rf = RandomForestRegressor()\n",
    "fs_rf.fit(X_train_rf, Y_train_rf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-train-fs:  0.9394317909921377\n",
      "MSE Score-train-fs:  0.00010404089714285692\n",
      "MAE Score-train-fs:  0.007836171428571414\n"
     ]
    }
   ],
   "source": [
    "fs_rf_train_pred = fs_rf.predict(X_train_rf)\n",
    "fs_error_rf_r2_train = r2_score(Y_train_rf, fs_rf_train_pred)\n",
    "print('R2 Score-train-fs: ', fs_error_rf_r2_train)\n",
    "fs_error_rf_mse_train = mean_squared_error(Y_train_rf, fs_rf_train_pred)\n",
    "print('MSE Score-train-fs: ', fs_error_rf_mse_train)\n",
    "fs_error_rf_mae_train = mean_absolute_error(Y_train_rf, fs_rf_train_pred)\n",
    "print('MAE Score-train-fs: ', fs_error_rf_mae_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-test-fs:  0.5952618814737267\n",
      "MSE Score-test-fs:  0.0006779680800000003\n",
      "MAE Score-test-fs:  0.02034346666666667\n"
     ]
    }
   ],
   "source": [
    "fs_rf_test_pred = fs_rf.predict(X_test_rf)\n",
    "fs_error_rf_r2_test = r2_score(Y_test_rf, fs_rf_test_pred)\n",
    "print('R2 Score-test-fs: ', fs_error_rf_r2_test)\n",
    "fs_error_rf_mse_test = mean_squared_error(Y_test_rf, fs_rf_test_pred)\n",
    "print('MSE Score-test-fs: ', fs_error_rf_mse_test)\n",
    "fs_error_rf_mae_test = mean_absolute_error(Y_test_rf, fs_rf_test_pred)\n",
    "print('MAE Score-test-fs: ', fs_error_rf_mae_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5772020470140221\n"
     ]
    }
   ],
   "source": [
    "kfolds = KFold(n_splits=10)\n",
    "fs_score_rf = cross_val_score(fs_rf, X_rf, Y_rf, cv=kfolds)\n",
    "print(fs_score_rf.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adaboost Regressor\n",
    "col: FICO_Score_Scaled,Loan_Length,Amount_Funded_By_Investors,Open_Credit_Lines,Loan_Purpose,Inquiries_in_the_last_6months,Revolving_Credit_Balance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FICO_Score_Scaled</th>\n",
       "      <th>Loan_Length</th>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <th>Open_Credit_Lines</th>\n",
       "      <th>Loan_Purpose</th>\n",
       "      <th>Inquiries_in_the_last_6months</th>\n",
       "      <th>Revolving_Credit_Balance</th>\n",
       "      <th>Interest_Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.079088</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0.271966</td>\n",
       "      <td>0.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.002043</td>\n",
       "      <td>0.560697</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0.028440</td>\n",
       "      <td>0.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.995000</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0.743101</td>\n",
       "      <td>0.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.069295</td>\n",
       "      <td>0.131958</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.133290</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.203890</td>\n",
       "      <td>0.352453</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.285989</td>\n",
       "      <td>0.12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   FICO_Score_Scaled  Loan_Length  Amount_Funded_By_Investors  \\\n",
       "0                  1            0                    1.079088   \n",
       "1                  1            0                    1.002043   \n",
       "2                  1            1                    1.995000   \n",
       "3                  1            0                   -0.069295   \n",
       "4                  1            0                    0.203890   \n",
       "\n",
       "   Open_Credit_Lines  Loan_Purpose  Inquiries_in_the_last_6months  \\\n",
       "0           0.946340             2                              2   \n",
       "1           0.560697             2                              1   \n",
       "2           0.946340             2                              1   \n",
       "3           0.131958             2                              0   \n",
       "4           0.352453             1                              0   \n",
       "\n",
       "   Revolving_Credit_Balance  Interest_Rate  \n",
       "0                  0.271966           0.09  \n",
       "1                  0.028440           0.12  \n",
       "2                  0.743101           0.22  \n",
       "3                 -0.133290           0.10  \n",
       "4                  0.285989           0.12  "
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sel_col_adabr = ['FICO_Score_Scaled','Loan_Length','Amount_Funded_By_Investors','Open_Credit_Lines','Loan_Purpose','Inquiries_in_the_last_6months','Revolving_Credit_Balance','Interest_Rate']\n",
    "data_adabr = updated_loan_data[sel_col_adabr]\n",
    "data_adabr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1750, 7), (750, 7))"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_adabr = data_adabr.drop(['Interest_Rate'], axis=1)\n",
    "Y_adabr = data_adabr['Interest_Rate']\n",
    "X_train_adabr, X_test_adabr, Y_train_adabr, Y_test_adabr = train_test_split(X_adabr, Y_adabr, test_size=0.3, random_state=0)\n",
    "X_train_adabr.shape, X_test_adabr.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AdaBoostRegressor()"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fs_adabr = AdaBoostRegressor()\n",
    "fs_adabr.fit(X_train_adabr, Y_train_adabr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-train-fs:  0.570879067853812\n",
      "MSE Score-train-fs:  0.0007371214618129613\n",
      "MAE Score-train-fs:  0.02189696805967595\n"
     ]
    }
   ],
   "source": [
    "fs_adabr_train_pred = fs_adabr.predict(X_train_adabr)\n",
    "fs_error_adabr_r2_train = r2_score(Y_train_adabr, fs_adabr_train_pred)\n",
    "print('R2 Score-train-fs: ', fs_error_adabr_r2_train)\n",
    "fs_error_adabr_mse_train = mean_squared_error(Y_train_adabr, fs_adabr_train_pred)\n",
    "print('MSE Score-train-fs: ', fs_error_adabr_mse_train)\n",
    "fs_error_adabr_mae_train = mean_absolute_error(Y_train_adabr, fs_adabr_train_pred)\n",
    "print('MAE Score-train-fs: ', fs_error_adabr_mae_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-test-fs:  0.5561729273973717\n",
      "MSE Score-test-fs:  0.0007434451426518947\n",
      "MAE Score-test-fs:  0.021791117927498296\n"
     ]
    }
   ],
   "source": [
    "fs_adabr_test_pred = fs_adabr.predict(X_test_adabr)\n",
    "fs_error_adabr_r2_test = r2_score(Y_test_adabr, fs_adabr_test_pred)\n",
    "print('R2 Score-test-fs: ', fs_error_adabr_r2_test)\n",
    "fs_error_adabr_mse_test = mean_squared_error(Y_test_adabr, fs_adabr_test_pred)\n",
    "print('MSE Score-test-fs: ', fs_error_adabr_mse_test)\n",
    "fs_error_adabr_mae_test = mean_absolute_error(Y_test_adabr, fs_adabr_test_pred)\n",
    "print('MAE Score-test-fs: ', fs_error_adabr_mae_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5503511123348973\n"
     ]
    }
   ],
   "source": [
    "kfolds = KFold(n_splits=10)\n",
    "fs_score_adabr = cross_val_score(fs_adabr, X_adabr, Y_adabr, cv=kfolds)\n",
    "print(fs_score_adabr.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. GradientBoost\n",
    "col: FICO_Score_Scaled,Loan_Length,Amount_Funded_By_Investors,Inquiries_in_the_last_6months,Amount_Requested,Open_Credit_Lines,Revolving_Credit_Balance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FICO_Score_Scaled</th>\n",
       "      <th>Loan_Length</th>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <th>Inquiries_in_the_last_6months</th>\n",
       "      <th>Amount_Requested</th>\n",
       "      <th>Open_Credit_Lines</th>\n",
       "      <th>Interest_Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.079088</td>\n",
       "      <td>2</td>\n",
       "      <td>1.027044</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>0.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.002043</td>\n",
       "      <td>1</td>\n",
       "      <td>0.953494</td>\n",
       "      <td>0.560697</td>\n",
       "      <td>0.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.995000</td>\n",
       "      <td>1</td>\n",
       "      <td>2.043753</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>0.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.069295</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.100780</td>\n",
       "      <td>0.131958</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.203890</td>\n",
       "      <td>0</td>\n",
       "      <td>0.172163</td>\n",
       "      <td>0.352453</td>\n",
       "      <td>0.12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   FICO_Score_Scaled  Loan_Length  Amount_Funded_By_Investors  \\\n",
       "0                  1            0                    1.079088   \n",
       "1                  1            0                    1.002043   \n",
       "2                  1            1                    1.995000   \n",
       "3                  1            0                   -0.069295   \n",
       "4                  1            0                    0.203890   \n",
       "\n",
       "   Inquiries_in_the_last_6months  Amount_Requested  Open_Credit_Lines  \\\n",
       "0                              2          1.027044           0.946340   \n",
       "1                              1          0.953494           0.560697   \n",
       "2                              1          2.043753           0.946340   \n",
       "3                              0         -0.100780           0.131958   \n",
       "4                              0          0.172163           0.352453   \n",
       "\n",
       "   Interest_Rate  \n",
       "0           0.09  \n",
       "1           0.12  \n",
       "2           0.22  \n",
       "3           0.10  \n",
       "4           0.12  "
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sel_col_gbr = ['FICO_Score_Scaled','Loan_Length','Amount_Funded_By_Investors','Inquiries_in_the_last_6months','Amount_Requested','Open_Credit_Lines','Interest_Rate']\n",
    "data_gbr = updated_loan_data[sel_col_gbr]\n",
    "\n",
    "data_gbr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1750, 6), (750, 6))"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_gbr = data_gbr.drop(['Interest_Rate'], axis=1)\n",
    "Y_gbr = data_gbr['Interest_Rate']\n",
    "X_train_gbr, X_test_gbr, Y_train_gbr, Y_test_gbr = train_test_split(X_gbr, Y_gbr, test_size=0.3, random_state=0)\n",
    "X_train_gbr.shape, X_test_gbr.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GradientBoostingRegressor()"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fs_gbr = GradientBoostingRegressor()\n",
    "fs_gbr.fit(X_train_gbr, Y_train_gbr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-train-fs:  0.6864295637671607\n",
      "MSE Score-train-fs:  0.0005386348719491887\n",
      "MAE Score-train-fs:  0.017919253275880172\n"
     ]
    }
   ],
   "source": [
    "fs_gbr_train_pred = fs_gbr.predict(X_train_gbr)\n",
    "fs_error_gbr_r2_train = r2_score(Y_train_gbr, fs_gbr_train_pred)\n",
    "print('R2 Score-train-fs: ', fs_error_gbr_r2_train)\n",
    "fs_error_gbr_mse_train = mean_squared_error(Y_train_gbr, fs_gbr_train_pred)\n",
    "print('MSE Score-train-fs: ', fs_error_gbr_mse_train)\n",
    "fs_error_gbr_mae_train = mean_absolute_error(Y_train_gbr, fs_gbr_train_pred)\n",
    "print('MAE Score-train-fs: ', fs_error_gbr_mae_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-test-fs:  0.6282765412504967\n",
      "MSE Score-test-fs:  0.000622665936524584\n",
      "MAE Score-test-fs:  0.019608633987675594\n"
     ]
    }
   ],
   "source": [
    "fs_gbr_test_pred = fs_gbr.predict(X_test_gbr)\n",
    "fs_error_gbr_r2_test = r2_score(Y_test_gbr, fs_gbr_test_pred)\n",
    "print('R2 Score-test-fs: ', fs_error_gbr_r2_test)\n",
    "fs_error_gbr_mse_test = mean_squared_error(Y_test_gbr, fs_gbr_test_pred)\n",
    "print('MSE Score-test-fs: ', fs_error_gbr_mse_test)\n",
    "fs_error_gbr_mae_test = mean_absolute_error(Y_test_gbr, fs_gbr_test_pred)\n",
    "print('MAE Score-test-fs: ', fs_error_gbr_mae_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6276544530998504\n"
     ]
    }
   ],
   "source": [
    "kfolds = KFold(n_splits=10)\n",
    "fs_score_gbr = cross_val_score(fs_gbr, X_gbr, Y_gbr, cv=kfolds)\n",
    "print(fs_score_gbr.mean())"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### XGBOOST\n",
    "col: FICO_Score_Scaled,Loan_Length,Inquiries_in_the_last_6months,Amount_Funded_By_Investors,Open_Credit_Lines,Revolving_Credit_Balance,Monthly_Income"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FICO_Score_Scaled</th>\n",
       "      <th>Loan_Length</th>\n",
       "      <th>Inquiries_in_the_last_6months</th>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <th>Open_Credit_Lines</th>\n",
       "      <th>Revolving_Credit_Balance</th>\n",
       "      <th>Monthly_Income</th>\n",
       "      <th>Interest_Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.079088</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>0.271966</td>\n",
       "      <td>0.556836</td>\n",
       "      <td>0.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.002043</td>\n",
       "      <td>0.560697</td>\n",
       "      <td>0.028440</td>\n",
       "      <td>-0.119300</td>\n",
       "      <td>0.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.995000</td>\n",
       "      <td>0.946340</td>\n",
       "      <td>0.743101</td>\n",
       "      <td>1.598158</td>\n",
       "      <td>0.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.069295</td>\n",
       "      <td>0.131958</td>\n",
       "      <td>-0.133290</td>\n",
       "      <td>-0.464711</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.203890</td>\n",
       "      <td>0.352453</td>\n",
       "      <td>0.285989</td>\n",
       "      <td>-0.820852</td>\n",
       "      <td>0.12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   FICO_Score_Scaled  Loan_Length  Inquiries_in_the_last_6months  \\\n",
       "0                  1            0                              2   \n",
       "1                  1            0                              1   \n",
       "2                  1            1                              1   \n",
       "3                  1            0                              0   \n",
       "4                  1            0                              0   \n",
       "\n",
       "   Amount_Funded_By_Investors  Open_Credit_Lines  Revolving_Credit_Balance  \\\n",
       "0                    1.079088           0.946340                  0.271966   \n",
       "1                    1.002043           0.560697                  0.028440   \n",
       "2                    1.995000           0.946340                  0.743101   \n",
       "3                   -0.069295           0.131958                 -0.133290   \n",
       "4                    0.203890           0.352453                  0.285989   \n",
       "\n",
       "   Monthly_Income  Interest_Rate  \n",
       "0        0.556836           0.09  \n",
       "1       -0.119300           0.12  \n",
       "2        1.598158           0.22  \n",
       "3       -0.464711           0.10  \n",
       "4       -0.820852           0.12  "
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sel_col_xgb = ['FICO_Score_Scaled','Loan_Length','Inquiries_in_the_last_6months','Amount_Funded_By_Investors','Open_Credit_Lines','Revolving_Credit_Balance','Monthly_Income','Interest_Rate']\n",
    "data_xgb = updated_loan_data[sel_col_xgb]\n",
    "data_xgb.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1750, 7), (750, 7))"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_xgb = data_xgb.drop(['Interest_Rate'], axis=1)\n",
    "Y_xgb = data_xgb['Interest_Rate']\n",
    "X_train_xgb, X_test_xgb, Y_train_xgb, Y_test_xgb = train_test_split(X_xgb, Y_xgb, test_size=0.3, random_state=0)\n",
    "X_train_xgb.shape, X_test_xgb.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
       "             importance_type='gain', interaction_constraints='',\n",
       "             learning_rate=0.300000012, max_delta_step=0, max_depth=6,\n",
       "             min_child_weight=1, missing=nan, monotone_constraints='()',\n",
       "             n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n",
       "             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n",
       "             tree_method='exact', validate_parameters=1, verbosity=None)"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fs_xgb = XGBRegressor()\n",
    "fs_xgb.fit(X_train_xgb, Y_train_xgb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-train-fs:  0.9657324543488993\n",
      "MSE Score-train-fs:  5.886299513927381e-05\n",
      "MAE Score-train-fs:  0.005438632584299361\n"
     ]
    }
   ],
   "source": [
    "fs_xgb_train_pred = fs_xgb.predict(X_train_xgb)\n",
    "fs_error_xgb_r2_train = r2_score(Y_train_xgb, fs_xgb_train_pred)\n",
    "print('R2 Score-train-fs: ', fs_error_xgb_r2_train)\n",
    "fs_error_xgb_mse_train = mean_squared_error(Y_train_xgb, fs_xgb_train_pred)\n",
    "print('MSE Score-train-fs: ', fs_error_xgb_mse_train)\n",
    "fs_error_xgb_mae_train = mean_absolute_error(Y_train_xgb, fs_xgb_train_pred)\n",
    "print('MAE Score-train-fs: ', fs_error_xgb_mae_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-test-fs:  0.5501807091201787\n",
      "MSE Score-test-fs:  0.0007534825780561058\n",
      "MAE Score-test-fs:  0.02144995718955994\n"
     ]
    }
   ],
   "source": [
    "fs_xgb_test_pred = fs_xgb.predict(X_test_xgb)\n",
    "fs_error_xgb_r2_test = r2_score(Y_test_xgb, fs_xgb_test_pred)\n",
    "print('R2 Score-test-fs: ', fs_error_xgb_r2_test)\n",
    "fs_error_xgb_mse_test = mean_squared_error(Y_test_xgb, fs_xgb_test_pred)\n",
    "print('MSE Score-test-fs: ', fs_error_xgb_mse_test)\n",
    "fs_error_xgb_mae_test = mean_absolute_error(Y_test_xgb, fs_xgb_test_pred)\n",
    "print('MAE Score-test-fs: ', fs_error_xgb_mae_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5615125359292313\n"
     ]
    }
   ],
   "source": [
    "kfolds = KFold(n_splits=10)\n",
    "fs_score_xgb = cross_val_score(fs_xgb, X_xgb, Y_xgb, cv=kfolds)\n",
    "print(fs_score_xgb.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### KNN\n",
    "col: FICO_Score_Scaled,Employment_Length,Inquiries_in_the_last_6months,Home_Ownership,Loan_Purpose,Amount_Funded_By_Investors,Amount_Requested"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FICO_Score_Scaled</th>\n",
       "      <th>Employment_Length</th>\n",
       "      <th>Inquiries_in_the_last_6months</th>\n",
       "      <th>Home_Ownership</th>\n",
       "      <th>Loan_Purpose</th>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <th>Amount_Requested</th>\n",
       "      <th>Interest_Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.079088</td>\n",
       "      <td>1.027044</td>\n",
       "      <td>0.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.002043</td>\n",
       "      <td>0.953494</td>\n",
       "      <td>0.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.995000</td>\n",
       "      <td>2.043753</td>\n",
       "      <td>0.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.069295</td>\n",
       "      <td>-0.100780</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0.203890</td>\n",
       "      <td>0.172163</td>\n",
       "      <td>0.12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   FICO_Score_Scaled  Employment_Length  Inquiries_in_the_last_6months  \\\n",
       "0                  1                  0                              2   \n",
       "1                  1                  2                              1   \n",
       "2                  1                  2                              1   \n",
       "3                  1                  5                              0   \n",
       "4                  1                  9                              0   \n",
       "\n",
       "   Home_Ownership  Loan_Purpose  Amount_Funded_By_Investors  Amount_Requested  \\\n",
       "0               0             2                    1.079088          1.027044   \n",
       "1               0             2                    1.002043          0.953494   \n",
       "2               0             2                    1.995000          2.043753   \n",
       "3               0             2                   -0.069295         -0.100780   \n",
       "4               4             1                    0.203890          0.172163   \n",
       "\n",
       "   Interest_Rate  \n",
       "0           0.09  \n",
       "1           0.12  \n",
       "2           0.22  \n",
       "3           0.10  \n",
       "4           0.12  "
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sel_col_knnr = ['FICO_Score_Scaled','Employment_Length','Inquiries_in_the_last_6months','Home_Ownership','Loan_Purpose','Amount_Funded_By_Investors','Amount_Requested','Interest_Rate']\n",
    "data_knnr = updated_loan_data[sel_col_knnr]\n",
    "data_knnr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1750, 7), (750, 7))"
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_knnr = data_knnr.drop(['Interest_Rate'], axis=1)\n",
    "Y_knnr = data_knnr['Interest_Rate']\n",
    "X_train_knnr, X_test_knnr, Y_train_knnr, Y_test_knnr = train_test_split(X_knnr, Y_knnr, test_size=0.3, random_state=0)\n",
    "X_train_knnr.shape, X_test_knnr.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsRegressor()"
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fs_knnr = KNeighborsRegressor()\n",
    "fs_knnr.fit(X_train_knnr, Y_train_knnr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-train-fs:  0.5315154134162703\n",
      "MSE Score-train-fs:  0.0008047382857142857\n",
      "MAE Score-train-fs:  0.022414857142857143\n"
     ]
    }
   ],
   "source": [
    "fs_knnr_train_pred = fs_knnr.predict(X_train_knnr)\n",
    "fs_error_knnr_r2_train = r2_score(Y_train_knnr, fs_knnr_train_pred)\n",
    "print('R2 Score-train-fs: ', fs_error_knnr_r2_train)\n",
    "fs_error_knnr_mse_train = mean_squared_error(Y_train_knnr, fs_knnr_train_pred)\n",
    "print('MSE Score-train-fs: ', fs_error_knnr_mse_train)\n",
    "fs_error_knnr_mae_train = mean_absolute_error(Y_train_knnr, fs_knnr_train_pred)\n",
    "print('MAE Score-train-fs: ', fs_error_knnr_mae_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 Score-test-fs:  0.2735989750290694\n",
      "MSE Score-test-fs:  0.0012167786666666667\n",
      "MAE Score-test-fs:  0.02769066666666667\n"
     ]
    }
   ],
   "source": [
    "fs_knnr_test_pred = fs_knnr.predict(X_test_knnr)\n",
    "fs_error_knnr_r2_test = r2_score(Y_test_knnr, fs_knnr_test_pred)\n",
    "print('R2 Score-test-fs: ', fs_error_knnr_r2_test)\n",
    "fs_error_knnr_mse_test = mean_squared_error(Y_test_knnr, fs_knnr_test_pred)\n",
    "print('MSE Score-test-fs: ', fs_error_knnr_mse_test)\n",
    "fs_error_knnr_mae_test = mean_absolute_error(Y_test_knnr, fs_knnr_test_pred)\n",
    "print('MAE Score-test-fs: ', fs_error_knnr_mae_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.27346038307852505\n"
     ]
    }
   ],
   "source": [
    "kfolds = KFold(n_splits=10)\n",
    "fs_score_knnr = cross_val_score(fs_knnr, X_knnr, Y_knnr, cv=kfolds)\n",
    "print(fs_score_knnr.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*****************************************************"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 8. HYPERPARAMETER TUNING"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### GridSearchCV - GradientBoosting Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gbr_ = GradientBoostingRegressor()\n",
    "\n",
    "parameters = {'n_estimators':[20,50,100,200],\n",
    "               'learning_rate':[0.01, 0.05, 0.1, 0.5, 1.0],\n",
    "               'max_depth':[5,10,None],\n",
    "               #'subsample':[0.9, 0.75, 0.5, 0.2, 0.1, 1.0],\n",
    "               'random_state':[1],\n",
    "               'min_samples_leaf':[5,10,20],\n",
    "               'min_samples_split':[5,10,20,40]\n",
    "             }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_GBR = GridSearchCV(estimator = gbr_, param_grid = parameters, cv = 10, n_jobs = -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_GBR.fit(X_train, Y_train)\n",
    "\n",
    "print(\"\\n The best estimator across ALL searched params:\\n\", grid_GBR.best_estimator_)\n",
    "print(\"\\n The best score across ALL searched params:\\n\", grid_GBR.best_score_)\n",
    "print(\"\\n The best parameters across ALL searched params:\\n\", grid_GBR.best_params_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The best estimator across ALL searched params:\n",
    " GradientBoostingRegressor(learning_rate=0.01, max_depth=4, min_samples_leaf=10,\n",
    "                          min_samples_split=5, n_estimators=500, random_state=1,\n",
    "                          subsample=0.5)\n",
    "\n",
    " The best score across ALL searched params:\n",
    " 0.6177043627031168\n",
    "\n",
    " The best parameters across ALL searched params:\n",
    " {'learning_rate': 0.01, 'max_depth': 4, 'min_samples_leaf': 10, 'min_samples_split': 5, 'n_estimators': 500, 'random_state': 1, 'subsample': 0.5}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [],
   "source": [
    "gbr_ = GradientBoostingRegressor()\n",
    "param_gbr = {\n",
    "        'learning_rate': [0.01, 0.05, 0.1],\n",
    "        'max_depth': [3, 5, 7, 10],\n",
    "        'subsample': [0.5, 0.7],\n",
    "        'n_estimators' : [20, 50, 100, 200],\n",
    "        'random_state':[1],\n",
    "        'min_samples_leaf':[5,10,20],\n",
    "        'min_samples_split':[5,10,20,40]\n",
    "    }\n",
    "grid_GBR = GridSearchCV(estimator = gbr_, param_grid = param_gbr, cv = 5, n_jobs = -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " The best estimator across ALL searched params:\n",
      " GradientBoostingRegressor(learning_rate=0.05, min_samples_leaf=20,\n",
      "                          min_samples_split=5, n_estimators=200, random_state=1,\n",
      "                          subsample=0.7)\n",
      "\n",
      " The best score across ALL searched params:\n",
      " 0.6281885512038226\n",
      "\n",
      " The best parameters across ALL searched params:\n",
      " {'learning_rate': 0.05, 'max_depth': 3, 'min_samples_leaf': 20, 'min_samples_split': 5, 'n_estimators': 200, 'random_state': 1, 'subsample': 0.7}\n"
     ]
    }
   ],
   "source": [
    "grid_GBR.fit(X_train, Y_train)\n",
    "\n",
    "print(\"\\n The best estimator across ALL searched params:\\n\", grid_GBR.best_estimator_)\n",
    "print(\"\\n The best score across ALL searched params:\\n\", grid_GBR.best_score_)\n",
    "print(\"\\n The best parameters across ALL searched params:\\n\", grid_GBR.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.0006166988388398714\n"
     ]
    }
   ],
   "source": [
    "GBR_cv2 = GradientBoostingRegressor(learning_rate=0.05, max_depth=3, min_samples_leaf=20, min_samples_split=5, n_estimators=200, random_state=1, subsample=0.7)\n",
    "\n",
    "score_gbr2 = np.mean(cross_val_score(GBR_cv2,X,Y,scoring='neg_mean_squared_error',cv=10,n_jobs=1))\n",
    "print(score_gbr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GradientBoostingRegressor(learning_rate=0.05, min_samples_leaf=20,\n",
       "                          min_samples_split=5, n_estimators=200, random_state=1,\n",
       "                          subsample=0.7)"
      ]
     },
     "execution_count": 259,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gbr_gdsrc2 = GradientBoostingRegressor(learning_rate=0.05, max_depth=3, min_samples_leaf=20, min_samples_split=5, n_estimators=200, random_state=1, subsample=0.7)\n",
    "\n",
    "gbr_gdsrc2.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 score test gbr2:  0.6349297796227187\n",
      "MSE score test gbr2:  0.000611521240637224\n",
      "MAE score test gbr2:  0.01958843268554731\n"
     ]
    }
   ],
   "source": [
    "gbr2_gdcv_y_pred = gbr_gdsrc2.predict(X_test)\n",
    "\n",
    "error_r2_score_gbr2_gdcv = r2_score(Y_test, gbr2_gdcv_y_pred)\n",
    "print('R2 score test gbr2: ', error_r2_score_gbr2_gdcv)\n",
    "error_mse_gbr2_gdcv = mean_squared_error(Y_test, gbr2_gdcv_y_pred)\n",
    "print('MSE score test gbr2: ', error_mse_gbr2_gdcv)\n",
    "error_mae_gbr2_gdcv = mean_absolute_error(Y_test, gbr2_gdcv_y_pred)\n",
    "print('MAE score test gbr2: ', error_mae_gbr2_gdcv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***********************************************"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.00061882242933159\n"
     ]
    }
   ],
   "source": [
    "GBR_cv = GradientBoostingRegressor(n_estimators = 500, learning_rate = 0.01, subsample = 0.5, max_depth = 4, random_state = 1)\n",
    "\n",
    "score_gbr = np.mean(cross_val_score(GBR_cv,X,Y,scoring='neg_mean_squared_error',cv=10,n_jobs=1))\n",
    "print(score_gbr)\n",
    "#Out[18]: -160.77842893572068\n",
    "\n",
    "#GBR_cv.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GradientBoostingRegressor(learning_rate=0.01, max_depth=4, n_estimators=500,\n",
       "                          random_state=1, subsample=0.5)"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gbr_gdsrc = GradientBoostingRegressor(n_estimators = 500, learning_rate = 0.01, subsample = 0.5, max_depth = 4, random_state = 1)\n",
    "\n",
    "gbr_gdsrc.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 score test gbr:  0.6315311443742493\n",
      "MSE score test gbr:  0.0006172142211314137\n",
      "MAE score test gbr:  0.019589626732063097\n"
     ]
    }
   ],
   "source": [
    "gbr_gdcv_y_pred = gbr_gdsrc.predict(X_test)\n",
    "\n",
    "error_r2_score_gbr_gdcv = r2_score(Y_test, gbr_gdcv_y_pred)\n",
    "print('R2 score test gbr: ', error_r2_score_gbr_gdcv)\n",
    "error_mse_gbr_gdcv = mean_squared_error(Y_test, gbr_gdcv_y_pred)\n",
    "print('MSE score test gbr: ', error_mse_gbr_gdcv)\n",
    "error_mae_gbr_gdcv = mean_absolute_error(Y_test, gbr_gdcv_y_pred)\n",
    "print('MAE score test gbr: ', error_mae_gbr_gdcv)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Randomized SearchCV - GradientBoosting Regressor"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#GBR_ransrc = GradientBoostingRegressor(subsample= 0.2, random_state= 1, n_estimators= 500, min_samples_split= 5, min_samples_leaf= 10, max_depth= 4, learning_rate= 0.01)\n",
    "\n",
    "#score = np.mean(cross_val_score(GBR2,X,y,scoring='neg_mean_squared_error',cv=crossvalidation,n_jobs=1))\n",
    "#print(score)\n",
    "#Out[18]: -160.77842893572068\n",
    "#GBR_ransc_y_pred.fit(X_train, Y_train)\n",
    "\n",
    "GBR_rndsrc = GradientBoostingRegressor(subsample= 0.5, random_state= 1, n_estimators= 100, min_samples_split= 5, min_samples_leaf= 10, max_depth= 4, learning_rate= 0.04)\n",
    "GBR_rndsrc.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "GBR_rndsrc_y_pred = GBR_rndsrc.predict(X_test)\n",
    "\n",
    "error_mse_score_GBR_rndsrc = mean_squared_error(Y_test, GBR_rndsrc_y_pred)\n",
    "print(error_mse_score_GBR_rndsrc)\n",
    "error_r2_score_GBR_rndsrc = r2_score(Y_test, GBR_rndsrc_y_pred)\n",
    "print(error_r2_score_GBR_rndsrc)\n",
    "\n",
    "\n",
    "### Previous\n",
    "##### mse: 0.0006148353886428854\n",
    "##### r2_score: 0.6329512764042058"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### After Hyperparameter Tuning:\n",
    "1. With GridSearchCV - r2_score: 0.6362978132859753\n",
    "2. With RandomizedSearchCV - r2_score: 0.6318684994306278"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Hyperparameter Tuning of RandomForest Regressor"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### GridSearchCV of RandomForest"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "RFmodel = RandomForestRegressor()\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "param_rf = [{        \n",
    "               'max_depth': [5,10,None],\n",
    "               'criterion':['mse'],\n",
    "               'max_features':['auto','log2'],\n",
    "               'n_estimators':[20, 50, 100, 200], \n",
    "               'min_samples_leaf':[5,10,20],\n",
    "               'min_samples_split':[5,10,20,40]\n",
    "              }\n",
    "              ]\n",
    "             \n",
    "grid_search = GridSearchCV(estimator=RFmodel,\n",
    "                           param_grid=param_rf,\n",
    "                           cv=10,\n",
    "                           n_jobs=-1)\n",
    "                           \n",
    "grid_rf = grid_search.fit(X_train, Y_train)\n",
    "print(grid_rf.best_score_)\n",
    "print(grid_rf.best_estimator_)\n",
    "print(grid_rf.best_params_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "0.6126139242596326\n",
    "RandomForestRegressor(max_depth=10, min_samples_leaf=10, min_samples_split=20,\n",
    "                      n_estimators=200)\n",
    "{'criterion': 'mse', 'max_depth': 10, 'max_features': 'auto', 'min_samples_leaf': 10, 'min_samples_split': 20, 'n_estimators': 200}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.0006441184179459679\n"
     ]
    }
   ],
   "source": [
    "rf_cv = RandomForestRegressor(criterion= 'mse', max_depth= 10, max_features= 'auto', min_samples_leaf= 10, min_samples_split= 20, n_estimators= 200)\n",
    "\n",
    "score_rf=np.mean(cross_val_score(rf_cv,X,Y,scoring='neg_mean_squared_error',cv=10,n_jobs=1))\n",
    "print(score_rf)\n",
    "\n",
    "\n",
    "#BR_cv.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(max_depth=10, min_samples_leaf=10, min_samples_split=20,\n",
       "                      n_estimators=200)"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfr_gdsrc = RandomForestRegressor(criterion= 'mse', max_depth= 10, max_features= 'auto', min_samples_leaf= 10, min_samples_split= 20, n_estimators= 200)\n",
    "\n",
    "rfr_gdsrc.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 score test rfr:  0.6145503346508242\n",
      "MSE score test rfr:  0.0006456584087136329\n",
      "MAE score test rfr:  0.01968943505603659\n"
     ]
    }
   ],
   "source": [
    "rfr_gdcv_y_pred = rfr_gdsrc.predict(X_test)\n",
    "\n",
    "error_r2_score_rfr_gdcv = r2_score(Y_test, rfr_gdcv_y_pred)\n",
    "print('R2 score test rfr: ', error_r2_score_rfr_gdcv)\n",
    "error_mse_rfr_gdcv = mean_squared_error(Y_test, rfr_gdcv_y_pred)\n",
    "print('MSE score test rfr: ', error_mse_rfr_gdcv)\n",
    "error_mae_rfr_gdcv = mean_absolute_error(Y_test, rfr_gdcv_y_pred)\n",
    "print('MAE score test rfr: ', error_mae_rfr_gdcv)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Hyperparameter: Grid Search Decision Tree"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DTmodel = DecisionTreeRegressor()\n",
    "#from sklearn.model_selection import GridSearchCV\n",
    "param_dt = [{        \n",
    "               'max_depth': [5,10,None],\n",
    "               'criterion':['mse'],\n",
    "               'max_features':['auto'],\n",
    "               #'n_estimators':[100,200,300,400,500], \n",
    "               'min_samples_leaf':[5,10,20],\n",
    "               'min_samples_split':[5,10,20,40]\n",
    "              }\n",
    "              ]\n",
    "             \n",
    "grid_search = GridSearchCV(estimator=DTmodel,\n",
    "                           param_grid=param_dt,\n",
    "                           cv=10,\n",
    "                           n_jobs=-1)\n",
    "                           \n",
    "grid_dt = grid_search.fit(X_train, Y_train)\n",
    "print(grid_dt.best_score_)\n",
    "print(grid_dt.best_estimator_)\n",
    "print(grid_dt.best_params_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "0.6003432246476663\n",
    "DecisionTreeRegressor(max_depth=5, max_features='auto', min_samples_leaf=20,\n",
    "                      min_samples_split=10)\n",
    "{'criterion': 'mse', 'max_depth': 5, 'max_features': 'auto', 'min_samples_leaf': 20, 'min_samples_split': 10}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.0006784076504192928\n"
     ]
    }
   ],
   "source": [
    "dt_cv = DecisionTreeRegressor(criterion= 'mse',max_depth=5, max_features='auto', min_samples_leaf=20,\n",
    "                      min_samples_split=10)\n",
    "\n",
    "score_dt=np.mean(cross_val_score(dt_cv,X,Y,scoring='neg_mean_squared_error',cv=10,n_jobs=1))\n",
    "print(score_dt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(max_depth=5, max_features='auto', min_samples_leaf=20,\n",
       "                      min_samples_split=10)"
      ]
     },
     "execution_count": 230,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt_gdsrc = DecisionTreeRegressor(criterion= 'mse', max_depth=5, max_features='auto', min_samples_leaf=20,\n",
    "                      min_samples_split=10)\n",
    "\n",
    "dt_gdsrc.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 score test dt:  0.5924181468366971\n",
      "MSE score test dt:  0.0006827315584658204\n",
      "MAE score test dt:  0.020174849242849513\n"
     ]
    }
   ],
   "source": [
    "dt_gdcv_y_pred = dt_gdsrc.predict(X_test)\n",
    "\n",
    "error_r2_score_dt_gdcv = r2_score(Y_test, dt_gdcv_y_pred)\n",
    "print('R2 score test dt: ', error_r2_score_dt_gdcv)\n",
    "error_mse_dt_gdcv = mean_squared_error(Y_test, dt_gdcv_y_pred)\n",
    "print('MSE score test dt: ', error_mse_dt_gdcv)\n",
    "error_mae_dt_gdcv = mean_absolute_error(Y_test, dt_gdcv_y_pred)\n",
    "print('MAE score test dt: ', error_mae_dt_gdcv)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Grid Search Adaboost"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "adamodel=AdaBoostRegressor()\n",
    "\n",
    "param_ada = {'n_estimators':[20,50,100,200],\n",
    "               'learning_rate':[0.01, 0.05, 0.1],\n",
    "               #'subsample':[0.9, 0.75, 0.5, 0.2, 0.1, 1.0],\n",
    "               'random_state':[1]\n",
    "             }\n",
    "\n",
    "#search_grid={'n_estimators':[500,1000,2000],'learning_rate':[.001,0.01,.1],'random_state':[1]}\n",
    "search=GridSearchCV(estimator=adamodel,param_grid=param_ada,scoring='neg_mean_squared_error',n_jobs=1,cv=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    Removed max_depth, min_sample_split, min_sample_leaf features from the parameter as they did not exist.\n",
    "    \n",
    "    https://machinelearningmastery.com/adaboost-ensemble-in-python/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "grid_ada = search.fit(X_train, Y_train)\n",
    "print(grid_ada.best_score_)\n",
    "print(grid_ada.best_estimator_)\n",
    "print(grid_ada.best_params_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-0.0007534850236542375\n",
    "AdaBoostRegressor(learning_rate=0.1, n_estimators=100, random_state=1)\n",
    "{'learning_rate': 0.1, 'n_estimators': 100, 'random_state': 1}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.0007398609099982926\n"
     ]
    }
   ],
   "source": [
    "adab_cv = AdaBoostRegressor(learning_rate=0.1, n_estimators=100, random_state=1)\n",
    "\n",
    "score_adab=np.mean(cross_val_score(adab_cv,X,Y,scoring='neg_mean_squared_error',cv=10,n_jobs=1))\n",
    "print(score_adab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AdaBoostRegressor(learning_rate=0.1, n_estimators=100, random_state=1)"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adab_gdsrc = AdaBoostRegressor(learning_rate=0.1, n_estimators=100, random_state=1)\n",
    "\n",
    "adab_gdsrc.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 score test adab:  0.5699457532703399\n",
      "MSE score test adab:  0.0007203745795251244\n",
      "MAE score test adab:  0.02127592512263264\n"
     ]
    }
   ],
   "source": [
    "adab_gdcv_y_pred = adab_gdsrc.predict(X_test)\n",
    "\n",
    "error_r2_score_adab_gdcv = r2_score(Y_test, adab_gdcv_y_pred)\n",
    "print('R2 score test adab: ', error_r2_score_adab_gdcv)\n",
    "error_mse_adab_gdcv = mean_squared_error(Y_test, adab_gdcv_y_pred)\n",
    "print('MSE score test adab: ', error_mse_adab_gdcv)\n",
    "error_mae_adab_gdcv = mean_absolute_error(Y_test, adab_gdcv_y_pred)\n",
    "print('MAE score test adab: ', error_mae_adab_gdcv)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### GridSearch - XGBOOST\n",
    "https://www.analyticsvidhya.com/blog/2016/03/complete-guide-parameter-tuning-xgboost-with-codes-python/\n",
    "* https://www.kaggle.com/felipefiorini/xgboost-hyper-parameter-tuning\n",
    "\n",
    "Default parameters\n",
    "max_depth=3, learning_rate=0.1, n_estimators=100, verbosity=1, silent=None, objective='reg:squarederror', booster='gbtree', n_jobs=1, nthread=None, gamma=0, min_child_weight=1, max_delta_step=0, subsample=1, colsample_bytree=1, colsample_bylevel=1, colsample_bynode=1, reg_alpha=0, reg_lambda=1, scale_pos_weight=1, base_score=0.5, random_state=0, seed=None, missing=None, importance_type='gain'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "xgbmodel=XGBRegressor()\n",
    "param_xgb = {\n",
    "        'learning_rate': [0.01, 0.05, 0.1],\n",
    "        'max_depth': [3, 5, 7, 10],\n",
    "        'min_child_weight': [1, 3, 5],\n",
    "        'subsample': [0.5, 0.7],\n",
    "        'colsample_bytree': [0.5, 0.7],\n",
    "        'n_estimators' : [20, 50, 100, 200],\n",
    "        'objective': ['reg:squarederror']\n",
    "    }\n",
    "\n",
    "gdsrc_xgb=GridSearchCV(estimator=xgbmodel,param_grid=param_xgb,scoring='neg_mean_squared_error',n_jobs=1,cv=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "grid_xgb = gdsrc_xgb.fit(X_train, Y_train)\n",
    "print(grid_xgb.best_score_)\n",
    "print(grid_xgb.best_estimator_)\n",
    "print(grid_xgb.best_params_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-0.0006360088436173337\n",
    "XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
    "             colsample_bynode=1, colsample_bytree=0.5, gamma=0, gpu_id=-1,\n",
    "             importance_type='gain', interaction_constraints='',\n",
    "             learning_rate=0.05, max_delta_step=0, max_depth=3,\n",
    "             min_child_weight=3, missing=nan, monotone_constraints='()',\n",
    "             n_estimators=200, n_jobs=0, num_parallel_tree=1, random_state=0,\n",
    "             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=0.5,\n",
    "             tree_method='exact', validate_parameters=1, verbosity=None)\n",
    "{'colsample_bytree': 0.5, 'learning_rate': 0.05, 'max_depth': 3, 'min_child_weight': 3, 'n_estimators': 200, 'objective': 'reg:squarederror', 'subsample': 0.5}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.0006190569775081719\n"
     ]
    }
   ],
   "source": [
    "xgb_cv = XGBRegressor(colsample_bytree= 0.5, learning_rate=0.05, max_depth=3, min_child_weight=3, n_estimators=200, objective='reg:squarederror', subsample=0.5)\n",
    "\n",
    "score_xgb=np.mean(cross_val_score(xgb_cv,X,Y,scoring='neg_mean_squared_error',cv=10,n_jobs=1))\n",
    "print(score_xgb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "             colsample_bynode=1, colsample_bytree=0.5, gamma=0, gpu_id=-1,\n",
       "             importance_type='gain', interaction_constraints='',\n",
       "             learning_rate=0.05, max_delta_step=0, max_depth=3,\n",
       "             min_child_weight=3, missing=nan, monotone_constraints='()',\n",
       "             n_estimators=200, n_jobs=0, num_parallel_tree=1, random_state=0,\n",
       "             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=0.5,\n",
       "             tree_method='exact', validate_parameters=1, verbosity=None)"
      ]
     },
     "execution_count": 236,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xgb_gdsrc = XGBRegressor(colsample_bytree= 0.5, learning_rate=0.05, max_depth=3, min_child_weight=3, n_estimators=200, objective='reg:squarederror', subsample=0.5)\n",
    "\n",
    "xgb_gdsrc.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 score test xgb:  0.6374426230302442\n",
      "MSE score test xgb:  0.0006073120309226954\n",
      "MAE score test xgb:  0.019546278948783875\n"
     ]
    }
   ],
   "source": [
    "xgb_gdcv_y_pred = xgb_gdsrc.predict(X_test)\n",
    "\n",
    "error_r2_score_xgb_gdcv = r2_score(Y_test, xgb_gdcv_y_pred)\n",
    "print('R2 score test xgb: ', error_r2_score_xgb_gdcv)\n",
    "error_mse_xgb_gdcv = mean_squared_error(Y_test, xgb_gdcv_y_pred)\n",
    "print('MSE score test xgb: ', error_mse_xgb_gdcv)\n",
    "error_mae_xgb_gdcv = mean_absolute_error(Y_test, xgb_gdcv_y_pred)\n",
    "print('MAE score test xgb: ', error_mae_xgb_gdcv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 9. DEPLOYMENT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'true_value' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-269-f5960f40b360>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m10\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m10\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtrue_value\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpredicted_value\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mc\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'crimson'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0myscale\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'log'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mxscale\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'log'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'true_value' is not defined"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 720x720 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Interest_Rate</th>\n",
       "      <th>Predicted_lr</th>\n",
       "      <th>diff_lr</th>\n",
       "      <th>D^2</th>\n",
       "      <th>Predicted_dtreg_tst</th>\n",
       "      <th>diff_dtreg</th>\n",
       "      <th>G^2</th>\n",
       "      <th>Predicted_rfreg_tst</th>\n",
       "      <th>diff_rfreg</th>\n",
       "      <th>...</th>\n",
       "      <th>Predicted_xgbr_tst</th>\n",
       "      <th>diff_xgbr</th>\n",
       "      <th>S^2</th>\n",
       "      <th>Predicted_svr_tst</th>\n",
       "      <th>Predicted_knn_tst</th>\n",
       "      <th>diff_knn</th>\n",
       "      <th>W^2</th>\n",
       "      <th>Predicted_ridge_tst</th>\n",
       "      <th>diff_ridge</th>\n",
       "      <th>Z^2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>53</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.21</td>\n",
       "      <td>-0.00288</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.23</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>0.0004</td>\n",
       "      <td>0.22</td>\n",
       "      <td>-0.0084</td>\n",
       "      <td>...</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.00294</td>\n",
       "      <td>0.000009</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.0626</td>\n",
       "      <td>0.003919</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.00363</td>\n",
       "      <td>0.000013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2391</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.01541</td>\n",
       "      <td>0.000237</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.0016</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.0174</td>\n",
       "      <td>...</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.02140</td>\n",
       "      <td>0.000458</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.0094</td>\n",
       "      <td>0.000088</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.01346</td>\n",
       "      <td>0.000181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2310</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.01616</td>\n",
       "      <td>0.000261</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.0009</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.0216</td>\n",
       "      <td>...</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.02734</td>\n",
       "      <td>0.000748</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.11</td>\n",
       "      <td>-0.0194</td>\n",
       "      <td>0.000376</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.01607</td>\n",
       "      <td>0.000258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>728</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.13</td>\n",
       "      <td>-0.00846</td>\n",
       "      <td>0.000072</td>\n",
       "      <td>0.14</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>0.0004</td>\n",
       "      <td>0.14</td>\n",
       "      <td>-0.0219</td>\n",
       "      <td>...</td>\n",
       "      <td>0.15</td>\n",
       "      <td>-0.03195</td>\n",
       "      <td>0.001020</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.15</td>\n",
       "      <td>-0.0262</td>\n",
       "      <td>0.000686</td>\n",
       "      <td>0.13</td>\n",
       "      <td>-0.01174</td>\n",
       "      <td>0.000138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>850</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.14</td>\n",
       "      <td>-0.02723</td>\n",
       "      <td>0.000741</td>\n",
       "      <td>0.15</td>\n",
       "      <td>-0.04</td>\n",
       "      <td>0.0016</td>\n",
       "      <td>0.13</td>\n",
       "      <td>-0.0240</td>\n",
       "      <td>...</td>\n",
       "      <td>0.13</td>\n",
       "      <td>-0.01729</td>\n",
       "      <td>0.000299</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.13</td>\n",
       "      <td>-0.0206</td>\n",
       "      <td>0.000424</td>\n",
       "      <td>0.15</td>\n",
       "      <td>-0.03590</td>\n",
       "      <td>0.001288</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Unnamed: 0  Interest_Rate  Predicted_lr  diff_lr       D^2  \\\n",
       "0         53           0.21          0.21 -0.00288  0.000008   \n",
       "1       2391           0.12          0.10  0.01541  0.000237   \n",
       "2       2310           0.09          0.07  0.01616  0.000261   \n",
       "3        728           0.12          0.13 -0.00846  0.000072   \n",
       "4        850           0.11          0.14 -0.02723  0.000741   \n",
       "\n",
       "   Predicted_dtreg_tst  diff_dtreg     G^2  Predicted_rfreg_tst  diff_rfreg  \\\n",
       "0                 0.23       -0.02  0.0004                 0.22     -0.0084   \n",
       "1                 0.08        0.04  0.0016                 0.10      0.0174   \n",
       "2                 0.06        0.03  0.0009                 0.07      0.0216   \n",
       "3                 0.14       -0.02  0.0004                 0.14     -0.0219   \n",
       "4                 0.15       -0.04  0.0016                 0.13     -0.0240   \n",
       "\n",
       "   ...  Predicted_xgbr_tst  diff_xgbr       S^2  Predicted_svr_tst  \\\n",
       "0  ...                0.21    0.00294  0.000009               0.15   \n",
       "1  ...                0.10    0.02140  0.000458               0.15   \n",
       "2  ...                0.06    0.02734  0.000748               0.15   \n",
       "3  ...                0.15   -0.03195  0.001020               0.15   \n",
       "4  ...                0.13   -0.01729  0.000299               0.15   \n",
       "\n",
       "   Predicted_knn_tst  diff_knn       W^2  Predicted_ridge_tst  diff_ridge  \\\n",
       "0               0.15    0.0626  0.003919                 0.21     0.00363   \n",
       "1               0.11    0.0094  0.000088                 0.11     0.01346   \n",
       "2               0.11   -0.0194  0.000376                 0.07     0.01607   \n",
       "3               0.15   -0.0262  0.000686                 0.13    -0.01174   \n",
       "4               0.13   -0.0206  0.000424                 0.15    -0.03590   \n",
       "\n",
       "        Z^2  \n",
       "0  0.000013  \n",
       "1  0.000181  \n",
       "2  0.000258  \n",
       "3  0.000138  \n",
       "4  0.001288  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 268,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicted_intr = pd.read_csv(r'C:\\Users\\RONALD\\Desktop\\IMS-Classroom\\Python Code\\Resume Project - ML Algo\\Loan Interest Rate prediction\\final_intr_pred_analysis.csv')\n",
    "predicted_intr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'Interest_Rate', 'Predicted_lr', 'diff_lr', 'D^2',\n",
       "       'Predicted_dtreg_tst', 'diff_dtreg', 'G^2', 'Predicted_rfreg_tst',\n",
       "       'diff_rfreg', 'J^2', 'Predicted_adabst_tst', 'diff_adab', 'M^2',\n",
       "       'Predicted_gbr_tst', 'diff_gbr', 'P^2', 'Predicted_xgbr_tst',\n",
       "       'diff_xgbr', 'S^2', 'Predicted_svr_tst', 'Predicted_knn_tst',\n",
       "       'diff_knn', 'W^2', 'Predicted_ridge_tst', 'diff_ridge', 'Z^2'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 275,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicted_intr.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [],
   "source": [
    "true_value = predicted_intr['Interest_Rate']\n",
    "predicted_value_lr= predicted_intr['Predicted_lr']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,10))\n",
    "plt.scatter(true_value, predicted_value_lr, c='crimson')\n",
    "plt.yscale('log')\n",
    "plt.xscale('log')\n",
    "\n",
    "p1 = max(max(predicted_value_lr), max(true_value))\n",
    "p2 = min(min(predicted_value_lr), min(true_value))\n",
    "plt.plot([p1, p2], [p1, p2], 'b-')\n",
    "plt.xlabel('True Values', fontsize=15)\n",
    "plt.ylabel('Predictions_LR', fontsize=15)\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [],
   "source": [
    "predicted_value_dtreg= predicted_intr['Predicted_dtreg_tst']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,10))\n",
    "plt.scatter(true_value, predicted_value_dtreg, c='crimson')\n",
    "plt.yscale('log')\n",
    "plt.xscale('log')\n",
    "\n",
    "p1 = max(max(predicted_value_dtreg), max(true_value))\n",
    "p2 = min(min(predicted_value_dtreg), min(true_value))\n",
    "plt.plot([p1, p2], [p1, p2], 'b-')\n",
    "plt.xlabel('True Values', fontsize=15)\n",
    "plt.ylabel('Predictions_DTREG', fontsize=15)\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "predicted_value_rfreg= predicted_intr['Predicted_rfreg_tst']\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.scatter(true_value, predicted_value_rfreg, c='crimson')\n",
    "plt.yscale('log')\n",
    "plt.xscale('log')\n",
    "\n",
    "p1 = max(max(predicted_value_rfreg), max(true_value))\n",
    "p2 = min(min(predicted_value_rfreg), min(true_value))\n",
    "plt.plot([p1, p2], [p1, p2], 'b-')\n",
    "plt.xlabel('True Values', fontsize=15)\n",
    "plt.ylabel('Predictions_RFREG', fontsize=15)\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "predicted_value_rfreg= predicted_intr['Predicted_rfreg_tst']\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.scatter(true_value, predicted_value_rfreg, c='crimson')\n",
    "plt.yscale('log')\n",
    "plt.xscale('log')\n",
    "\n",
    "p1 = max(max(predicted_value_rfreg), max(true_value))\n",
    "p2 = min(min(predicted_value_rfreg), min(true_value))\n",
    "plt.plot([p1, p2], [p1, p2], 'b-')\n",
    "plt.xlabel('True Values', fontsize=15)\n",
    "plt.ylabel('Predictions_RFREG', fontsize=15)\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "predicted_value_adab= predicted_intr['Predicted_adabst_tst']\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.scatter(true_value, predicted_value_adab, c='crimson')\n",
    "plt.yscale('log')\n",
    "plt.xscale('log')\n",
    "\n",
    "p1 = max(max(predicted_value_adab), max(true_value))\n",
    "p2 = min(min(predicted_value_adab), min(true_value))\n",
    "plt.plot([p1, p2], [p1, p2], 'b-')\n",
    "plt.xlabel('True Values', fontsize=15)\n",
    "plt.ylabel('Predictions_ADAB', fontsize=15)\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "predicted_value_gbr= predicted_intr['Predicted_gbr_tst']\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.scatter(true_value, predicted_value_gbr, c='crimson')\n",
    "plt.yscale('log')\n",
    "plt.xscale('log')\n",
    "\n",
    "p1 = max(max(predicted_value_gbr), max(true_value))\n",
    "p2 = min(min(predicted_value_gbr), min(true_value))\n",
    "plt.plot([p1, p2], [p1, p2], 'b-')\n",
    "plt.xlabel('True Values', fontsize=15)\n",
    "plt.ylabel('Predictions_GBR', fontsize=15)\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "predicted_value_xgbr= predicted_intr['Predicted_xgbr_tst']\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.scatter(true_value, predicted_value_xgbr, c='crimson')\n",
    "plt.yscale('log')\n",
    "plt.xscale('log')\n",
    "\n",
    "p1 = max(max(predicted_value_xgbr), max(true_value))\n",
    "p2 = min(min(predicted_value_xgbr), min(true_value))\n",
    "plt.plot([p1, p2], [p1, p2], 'b-')\n",
    "plt.xlabel('True Values', fontsize=15)\n",
    "plt.ylabel('Predictions_XGBR', fontsize=15)\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "predicted_value_svr= predicted_intr['Predicted_svr_tst']\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.scatter(true_value, predicted_value_svr, c='crimson')\n",
    "plt.yscale('log')\n",
    "plt.xscale('log')\n",
    "\n",
    "p1 = max(max(predicted_value_svr), max(true_value))\n",
    "p2 = min(min(predicted_value_svr), min(true_value))\n",
    "plt.plot([p1, p2], [p1, p2], 'b-')\n",
    "plt.xlabel('True Values', fontsize=15)\n",
    "plt.ylabel('Predictions_SVR', fontsize=15)\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "predicted_value_knn= predicted_intr['Predicted_knn_tst']\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.scatter(true_value, predicted_value_knn, c='crimson')\n",
    "plt.yscale('log')\n",
    "plt.xscale('log')\n",
    "\n",
    "p1 = max(max(predicted_value_knn), max(true_value))\n",
    "p2 = min(min(predicted_value_knn), min(true_value))\n",
    "plt.plot([p1, p2], [p1, p2], 'b-')\n",
    "plt.xlabel('True Values', fontsize=15)\n",
    "plt.ylabel('Predictions_KNN', fontsize=15)\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
